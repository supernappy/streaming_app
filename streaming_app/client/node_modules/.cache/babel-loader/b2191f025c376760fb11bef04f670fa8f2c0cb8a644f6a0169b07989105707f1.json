{"ast":null,"code":"var _jsxFileName = \"/Users/walesolagbade/streaming_app/client/src/contexts/PlayerContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useRef, useEffect } from 'react';\nimport { Howl } from 'howler';\nimport { useSocket } from './SocketContext_enhanced';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerContext = /*#__PURE__*/createContext();\nexport const usePlayer = () => {\n  _s();\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n};\n_s(usePlayer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const PlayerProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    socket,\n    currentRoom\n  } = (useSocket === null || useSocket === void 0 ? void 0 : useSocket()) || {};\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(0.8);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [queue, setQueue] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [shuffleMode, setShuffleMode] = useState(false);\n  const [repeatMode, setRepeatMode] = useState('off'); // 'off', 'all', 'one'\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const soundRef = useRef(null);\n  const intervalRef = useRef(null);\n  const testAudioRef = useRef(null);\n\n  // Cleanup function to properly stop and dispose of audio resources\n  const cleanupAudio = () => {\n    if (soundRef.current) {\n      try {\n        soundRef.current.stop();\n        soundRef.current.unload();\n      } catch (error) {\n        console.warn('Error during Howl cleanup:', error);\n      }\n      soundRef.current = null;\n    }\n    if (testAudioRef.current) {\n      try {\n        testAudioRef.current.pause();\n        testAudioRef.current.src = '';\n        testAudioRef.current.load();\n      } catch (error) {\n        console.warn('Error during HTML5 audio cleanup:', error);\n      }\n      testAudioRef.current = null;\n    }\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      cleanupAudio();\n    };\n  }, []);\n\n  // Test if track URL is accessible\n  const testTrackAccessibility = async url => {\n    try {\n      console.log('üîç Testing track accessibility:', url);\n      const response = await fetch(url, {\n        method: 'HEAD',\n        mode: 'cors'\n      });\n      console.log('‚úÖ Track accessibility test result:', response.status, response.statusText);\n      return response.ok;\n    } catch (error) {\n      console.error('‚ùå Track accessibility test failed:', error);\n      return false;\n    }\n  };\n\n  // Keep a session-level set of tracks already incremented to avoid double counting on resume\n  const incrementedRef = useRef(new Set());\n  const lastIncrementTrackIdRef = useRef(null);\n\n  // Increment play count for a track (single fire per track start) using new endpoint\n  const incrementPlayCount = async track => {\n    if (!(track !== null && track !== void 0 && track.id)) return;\n    const id = track.id;\n    // Avoid duplicate increments if already incremented during this play session\n    if (lastIncrementTrackIdRef.current === id) return;\n    lastIncrementTrackIdRef.current = id;\n    try {\n      const res = await fetch(`/api/tracks/${id}/play`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(currentRoom ? {\n          roomId: currentRoom\n        } : {})\n      });\n      if (res.ok) {\n        const data = await res.json();\n        const updatedTrack = data.track;\n        // Optimistically update currentTrack and queue copy\n        setCurrentTrack(prev => prev && prev.id === id ? {\n          ...prev,\n          play_count: updatedTrack.play_count\n        } : prev);\n        setQueue(prev => prev.map(t => t.id === id ? {\n          ...t,\n          play_count: updatedTrack.play_count\n        } : t));\n      }\n    } catch (err) {\n      console.warn('Failed to increment play count', err);\n    }\n  };\n\n  // Merge play_count updates received via socket into local state\n  useEffect(() => {\n    if (!socket) return;\n    const handler = ({\n      trackId,\n      play_count\n    }) => {\n      setCurrentTrack(prev => prev && prev.id === trackId ? {\n        ...prev,\n        play_count\n      } : prev);\n      setQueue(prev => prev.map(t => t.id === trackId ? {\n        ...t,\n        play_count\n      } : t));\n    };\n    socket.on('track:play-count-updated', handler);\n    return () => {\n      socket.off('track:play-count-updated', handler);\n    };\n  }, [socket]);\n  const playTrack = async (track, trackListArg) => {\n    console.log('=== PLAYER DEBUG ===');\n    console.log('Attempting to play track:', track);\n    console.log('Track file_url:', track.file_url);\n    console.log('Track hls_url:', track.hls_url);\n\n    // Clean up any existing audio resources first\n    cleanupAudio();\n    setError(null); // Clear any previous errors\n\n    setIsLoading(true);\n    setCurrentTrack(track);\n    // Use provided trackListArg as queue if available, else use current queue\n    const queueToUse = Array.isArray(trackListArg) && trackListArg.length > 0 ? trackListArg : queue;\n    setQueue(queueToUse);\n    setCurrentIndex(queueToUse.findIndex(t => t.id === track.id));\n    const audioUrl = track.hls_url || track.file_url;\n    console.log('Using audio URL:', audioUrl);\n\n    // Validate URL\n    if (!audioUrl) {\n      setError('No audio URL available for this track');\n      setIsLoading(false);\n      return;\n    }\n\n    // Test track accessibility before attempting to play\n    const isAccessible = await testTrackAccessibility(audioUrl);\n    if (!isAccessible) {\n      console.error('‚ùå Track is not accessible');\n      setError('Cannot access audio file. The track may be missing or the server is unavailable.');\n      setIsLoading(false);\n      return;\n    }\n    console.log('‚úÖ Track is accessible, proceeding with audio setup...');\n\n    // Test direct HTML5 audio first for debugging\n    testAudioRef.current = new Audio();\n    testAudioRef.current.crossOrigin = 'anonymous';\n    testAudioRef.current.preload = 'metadata';\n    testAudioRef.current.addEventListener('canplay', () => {\n      console.log('‚úÖ HTML5 Audio can play this file');\n    });\n    testAudioRef.current.addEventListener('loadedmetadata', () => {\n      console.log('‚úÖ HTML5 Audio metadata loaded, duration:', testAudioRef.current.duration);\n    });\n    testAudioRef.current.addEventListener('error', e => {\n      var _testAudioRef$current, _testAudioRef$current2, _testAudioRef$current3, _testAudioRef$current4, _testAudioRef$current5, _testAudioRef$current6;\n      console.error('‚ùå HTML5 Audio error:', e);\n      console.error('Audio error code:', (_testAudioRef$current = testAudioRef.current) === null || _testAudioRef$current === void 0 ? void 0 : (_testAudioRef$current2 = _testAudioRef$current.error) === null || _testAudioRef$current2 === void 0 ? void 0 : _testAudioRef$current2.code);\n      console.error('Audio error message:', (_testAudioRef$current3 = testAudioRef.current) === null || _testAudioRef$current3 === void 0 ? void 0 : (_testAudioRef$current4 = _testAudioRef$current3.error) === null || _testAudioRef$current4 === void 0 ? void 0 : _testAudioRef$current4.message);\n\n      // Error codes: 1=ABORTED, 2=NETWORK, 3=DECODE, 4=SRC_NOT_SUPPORTED\n      const errorMessages = {\n        1: 'Audio loading was aborted',\n        2: 'Network error while loading audio',\n        3: 'Audio decoding failed',\n        4: 'Audio format not supported'\n      };\n      const errorCode = (_testAudioRef$current5 = testAudioRef.current) === null || _testAudioRef$current5 === void 0 ? void 0 : (_testAudioRef$current6 = _testAudioRef$current5.error) === null || _testAudioRef$current6 === void 0 ? void 0 : _testAudioRef$current6.code;\n      const errorMsg = errorMessages[errorCode] || 'Unknown audio error';\n      console.error('Detailed error:', errorMsg);\n    });\n\n    // Set source and load\n    testAudioRef.current.src = audioUrl;\n    testAudioRef.current.load();\n\n    // Create new Howl instance with better error handling\n    soundRef.current = new Howl({\n      src: [audioUrl],\n      html5: true,\n      // Use HTML5 Audio for better compatibility\n      format: ['mp3', 'wav', 'mpeg'],\n      // Support multiple formats\n      volume: volume,\n      preload: true,\n      cors: true,\n      // Enable CORS\n      onload: () => {\n        console.log('‚úÖ Howler: Audio loaded successfully');\n        console.log('Duration:', soundRef.current.duration());\n        setDuration(soundRef.current.duration());\n        setIsLoading(false);\n        setError(null);\n      },\n      onplay: () => {\n        console.log('‚úÖ Howler: Audio started playing');\n        setIsPlaying(true);\n        setIsLoading(false);\n        setError(null);\n        startTimeTracking();\n        if (track && track.id) {\n          incrementPlayCount(track);\n        }\n      },\n      onpause: () => {\n        console.log('‚è∏Ô∏è Howler: Audio paused');\n        setIsPlaying(false);\n        clearInterval(intervalRef.current);\n      },\n      onend: () => {\n        console.log('üîö Howler: Audio ended');\n        setIsPlaying(false);\n        setCurrentTime(0);\n        clearInterval(intervalRef.current);\n        handleTrackEnd();\n      },\n      onloaderror: (id, error) => {\n        console.error('‚ùå Howler: Audio load error:', error);\n        console.error('‚ùå Howler: Error ID:', id);\n        console.error('‚ùå Howler: Full error object:', error);\n\n        // More specific error messages\n        let errorMsg = 'Failed to load audio file.';\n        if (typeof error === 'string' && error.includes('404')) {\n          errorMsg = 'Audio file not found (404). The track may have been moved or deleted.';\n        } else if (typeof error === 'string' && error.includes('CORS')) {\n          errorMsg = 'Cross-origin request blocked. Please contact support.';\n        } else if (typeof error === 'string' && error.includes('network')) {\n          errorMsg = 'Network error. Please check your connection and try again.';\n        }\n        setError(errorMsg);\n        setIsLoading(false);\n        setIsPlaying(false);\n      },\n      onplayerror: (id, error) => {\n        console.error('‚ùå Howler: Audio play error:', error);\n        console.error('‚ùå Howler: Error ID:', id);\n        let errorMsg = 'Failed to play audio.';\n        if (typeof error === 'string' && error.includes('NotAllowedError')) {\n          errorMsg = 'Playback blocked by browser. Please click play again to allow audio.';\n        } else if (typeof error === 'string' && error.includes('decode')) {\n          errorMsg = 'Audio file is corrupted or in an unsupported format.';\n        }\n        setError(errorMsg);\n        setIsLoading(false);\n        setIsPlaying(false);\n      },\n      onerror: error => {\n        console.error('‚ùå Howler: General audio error:', error);\n        setError('An audio error occurred. Please try refreshing the page.');\n        setIsLoading(false);\n        setIsPlaying(false);\n      }\n    });\n    console.log('üîÑ Howler instance created, attempting to play...');\n    try {\n      // Add a small delay to ensure the audio is properly loaded\n      setTimeout(() => {\n        if (soundRef.current && soundRef.current.state() === 'loaded') {\n          const playResult = soundRef.current.play();\n          console.log('Play result:', playResult);\n        }\n      }, 100);\n    } catch (error) {\n      console.error('‚ùå Play attempt failed:', error);\n      setError('Failed to start playback. Please try again.');\n      setIsLoading(false);\n      setIsPlaying(false);\n    }\n  };\n  const handleTrackEnd = () => {\n    try {\n      if (repeatMode === 'one') {\n        // Replay current track\n        if (soundRef.current && soundRef.current.state() === 'loaded') {\n          soundRef.current.seek(0);\n          soundRef.current.play();\n        }\n      } else if (repeatMode === 'all' || queue.length > currentIndex + 1) {\n        playNext();\n      }\n    } catch (error) {\n      console.error('‚ùå Error in handleTrackEnd:', error);\n      setIsPlaying(false);\n    }\n  };\n  const startTimeTracking = () => {\n    intervalRef.current = setInterval(() => {\n      if (soundRef.current && soundRef.current.playing()) {\n        setCurrentTime(soundRef.current.seek());\n      }\n    }, 1000);\n  };\n  const togglePlayPause = () => {\n    if (soundRef.current && soundRef.current.state() === 'loaded') {\n      try {\n        if (isPlaying) {\n          soundRef.current.pause();\n        } else {\n          // Check if the sound is still valid before playing\n          if (soundRef.current._src) {\n            const playPromise = soundRef.current.play();\n            if (playPromise !== undefined) {\n              // Handle the promise if returned\n              console.log('Play initiated successfully');\n            }\n          }\n        }\n      } catch (error) {\n        console.error('‚ùå Error in togglePlayPause:', error);\n        setIsPlaying(false);\n        setIsLoading(false);\n      }\n    }\n  };\n  const seek = time => {\n    if (soundRef.current) {\n      soundRef.current.seek(time);\n      setCurrentTime(time);\n    }\n  };\n  const changeVolume = newVolume => {\n    setVolume(newVolume);\n    if (soundRef.current) {\n      soundRef.current.volume(newVolume);\n    }\n  };\n  const playNext = () => {\n    if (queue.length > 0) {\n      let nextIndex;\n      if (shuffleMode) {\n        // Random next track\n        nextIndex = Math.floor(Math.random() * queue.length);\n      } else if (currentIndex < queue.length - 1) {\n        nextIndex = currentIndex + 1;\n      } else if (repeatMode === 'all') {\n        nextIndex = 0; // Loop back to start\n      } else {\n        return; // No next track\n      }\n      const nextTrack = queue[nextIndex];\n      playTrack(nextTrack, queue);\n    }\n  };\n  const playPrevious = () => {\n    if (queue.length > 0) {\n      let prevIndex;\n      if (shuffleMode) {\n        // Random previous track\n        prevIndex = Math.floor(Math.random() * queue.length);\n      } else if (currentIndex > 0) {\n        prevIndex = currentIndex - 1;\n      } else if (repeatMode === 'all') {\n        prevIndex = queue.length - 1; // Loop to end\n      } else {\n        return; // No previous track\n      }\n      const prevTrack = queue[prevIndex];\n      playTrack(prevTrack, queue);\n    }\n  };\n  const toggleShuffle = () => {\n    setShuffleMode(!shuffleMode);\n  };\n  const setRepeat = mode => {\n    setRepeatMode(mode);\n  };\n  const addToQueue = track => {\n    setQueue(prev => [...prev, track]);\n  };\n  const removeFromQueue = trackId => {\n    setQueue(prev => prev.filter(track => track.id !== trackId));\n  };\n  const clearQueue = () => {\n    setQueue([]);\n    setCurrentIndex(0);\n  };\n  const stop = () => {\n    cleanupAudio();\n    setCurrentTrack(null);\n    setIsPlaying(false);\n    setCurrentTime(0);\n    setIsLoading(false);\n  };\n  const value = {\n    currentTrack,\n    isPlaying,\n    volume,\n    currentTime,\n    duration,\n    queue,\n    currentIndex,\n    shuffleMode,\n    repeatMode,\n    isLoading,\n    error,\n    playTrack,\n    togglePlayPause,\n    stop,\n    seek,\n    changeVolume,\n    playNext,\n    playPrevious,\n    addToQueue,\n    removeFromQueue,\n    clearQueue,\n    toggleShuffle,\n    setRepeat\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 454,\n    columnNumber: 5\n  }, this);\n};\n_s2(PlayerProvider, \"pvFnBBfP/zZZaDbRpJkhYfZqZ9A=\");\n_c = PlayerProvider;\nvar _c;\n$RefreshReg$(_c, \"PlayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useRef","useEffect","Howl","useSocket","jsxDEV","_jsxDEV","PlayerContext","usePlayer","_s","context","Error","PlayerProvider","children","_s2","socket","currentRoom","currentTrack","setCurrentTrack","isPlaying","setIsPlaying","volume","setVolume","currentTime","setCurrentTime","duration","setDuration","queue","setQueue","currentIndex","setCurrentIndex","shuffleMode","setShuffleMode","repeatMode","setRepeatMode","isLoading","setIsLoading","error","setError","soundRef","intervalRef","testAudioRef","cleanupAudio","current","stop","unload","console","warn","pause","src","load","clearInterval","testTrackAccessibility","url","log","response","fetch","method","mode","status","statusText","ok","incrementedRef","Set","lastIncrementTrackIdRef","incrementPlayCount","track","id","res","headers","body","JSON","stringify","roomId","data","json","updatedTrack","prev","play_count","map","t","err","handler","trackId","on","off","playTrack","trackListArg","file_url","hls_url","queueToUse","Array","isArray","length","findIndex","audioUrl","isAccessible","Audio","crossOrigin","preload","addEventListener","e","_testAudioRef$current","_testAudioRef$current2","_testAudioRef$current3","_testAudioRef$current4","_testAudioRef$current5","_testAudioRef$current6","code","message","errorMessages","errorCode","errorMsg","html5","format","cors","onload","onplay","startTimeTracking","onpause","onend","handleTrackEnd","onloaderror","includes","onplayerror","onerror","setTimeout","state","playResult","play","seek","playNext","setInterval","playing","togglePlayPause","_src","playPromise","undefined","time","changeVolume","newVolume","nextIndex","Math","floor","random","nextTrack","playPrevious","prevIndex","prevTrack","toggleShuffle","setRepeat","addToQueue","removeFromQueue","filter","clearQueue","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/walesolagbade/streaming_app/client/src/contexts/PlayerContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useRef, useEffect } from 'react';\nimport { Howl } from 'howler';\nimport { useSocket } from './SocketContext_enhanced';\n\nconst PlayerContext = createContext();\n\nexport const usePlayer = () => {\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n};\n\nexport const PlayerProvider = ({ children }) => {\n  const { socket, currentRoom } = useSocket?.() || {};\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(0.8);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [queue, setQueue] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [shuffleMode, setShuffleMode] = useState(false);\n  const [repeatMode, setRepeatMode] = useState('off'); // 'off', 'all', 'one'\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  const soundRef = useRef(null);\n  const intervalRef = useRef(null);\n  const testAudioRef = useRef(null);\n\n  // Cleanup function to properly stop and dispose of audio resources\n  const cleanupAudio = () => {\n    if (soundRef.current) {\n      try {\n        soundRef.current.stop();\n        soundRef.current.unload();\n      } catch (error) {\n        console.warn('Error during Howl cleanup:', error);\n      }\n      soundRef.current = null;\n    }\n    \n    if (testAudioRef.current) {\n      try {\n        testAudioRef.current.pause();\n        testAudioRef.current.src = '';\n        testAudioRef.current.load();\n      } catch (error) {\n        console.warn('Error during HTML5 audio cleanup:', error);\n      }\n      testAudioRef.current = null;\n    }\n    \n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      cleanupAudio();\n    };\n  }, []);\n\n    // Test if track URL is accessible\n  const testTrackAccessibility = async (url) => {\n    try {\n      console.log('üîç Testing track accessibility:', url);\n      const response = await fetch(url, { \n        method: 'HEAD',\n        mode: 'cors'\n      });\n      console.log('‚úÖ Track accessibility test result:', response.status, response.statusText);\n      return response.ok;\n    } catch (error) {\n      console.error('‚ùå Track accessibility test failed:', error);\n      return false;\n    }\n  };\n\n  // Keep a session-level set of tracks already incremented to avoid double counting on resume\n  const incrementedRef = useRef(new Set());\n  const lastIncrementTrackIdRef = useRef(null);\n\n  // Increment play count for a track (single fire per track start) using new endpoint\n  const incrementPlayCount = async (track) => {\n    if (!track?.id) return;\n    const id = track.id;\n    // Avoid duplicate increments if already incremented during this play session\n    if (lastIncrementTrackIdRef.current === id) return;\n    lastIncrementTrackIdRef.current = id;\n    try {\n      const res = await fetch(`/api/tracks/${id}/play`, { \n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(currentRoom ? { roomId: currentRoom } : {})\n      });\n      if (res.ok) {\n        const data = await res.json();\n        const updatedTrack = data.track;\n        // Optimistically update currentTrack and queue copy\n        setCurrentTrack(prev => prev && prev.id === id ? { ...prev, play_count: updatedTrack.play_count } : prev);\n        setQueue(prev => prev.map(t => t.id === id ? { ...t, play_count: updatedTrack.play_count } : t));\n      }\n    } catch (err) {\n      console.warn('Failed to increment play count', err);\n    }\n  };\n\n  // Merge play_count updates received via socket into local state\n  useEffect(() => {\n    if (!socket) return;\n    const handler = ({ trackId, play_count }) => {\n      setCurrentTrack(prev => (prev && prev.id === trackId) ? { ...prev, play_count } : prev);\n      setQueue(prev => prev.map(t => t.id === trackId ? { ...t, play_count } : t));\n    };\n    socket.on('track:play-count-updated', handler);\n    return () => {\n      socket.off('track:play-count-updated', handler);\n    };\n  }, [socket]);\n\n  const playTrack = async (track, trackListArg) => {\n    console.log('=== PLAYER DEBUG ===');\n    console.log('Attempting to play track:', track);\n    console.log('Track file_url:', track.file_url);\n    console.log('Track hls_url:', track.hls_url);\n    \n    // Clean up any existing audio resources first\n    cleanupAudio();\n    setError(null); // Clear any previous errors\n\n    setIsLoading(true);\n    setCurrentTrack(track);\n    // Use provided trackListArg as queue if available, else use current queue\n    const queueToUse = Array.isArray(trackListArg) && trackListArg.length > 0 ? trackListArg : queue;\n    setQueue(queueToUse);\n    setCurrentIndex(queueToUse.findIndex(t => t.id === track.id));\n\n    const audioUrl = track.hls_url || track.file_url;\n    console.log('Using audio URL:', audioUrl);\n\n    // Validate URL\n    if (!audioUrl) {\n      setError('No audio URL available for this track');\n      setIsLoading(false);\n      return;\n    }\n\n    // Test track accessibility before attempting to play\n    const isAccessible = await testTrackAccessibility(audioUrl);\n    if (!isAccessible) {\n      console.error('‚ùå Track is not accessible');\n      setError('Cannot access audio file. The track may be missing or the server is unavailable.');\n      setIsLoading(false);\n      return;\n    }\n\n    console.log('‚úÖ Track is accessible, proceeding with audio setup...');\n\n    // Test direct HTML5 audio first for debugging\n    testAudioRef.current = new Audio();\n    testAudioRef.current.crossOrigin = 'anonymous';\n    testAudioRef.current.preload = 'metadata';\n    \n    testAudioRef.current.addEventListener('canplay', () => {\n      console.log('‚úÖ HTML5 Audio can play this file');\n    });\n    \n    testAudioRef.current.addEventListener('loadedmetadata', () => {\n      console.log('‚úÖ HTML5 Audio metadata loaded, duration:', testAudioRef.current.duration);\n    });\n    \n    testAudioRef.current.addEventListener('error', (e) => {\n      console.error('‚ùå HTML5 Audio error:', e);\n      console.error('Audio error code:', testAudioRef.current?.error?.code);\n      console.error('Audio error message:', testAudioRef.current?.error?.message);\n      \n      // Error codes: 1=ABORTED, 2=NETWORK, 3=DECODE, 4=SRC_NOT_SUPPORTED\n      const errorMessages = {\n        1: 'Audio loading was aborted',\n        2: 'Network error while loading audio',\n        3: 'Audio decoding failed',\n        4: 'Audio format not supported'\n      };\n      \n      const errorCode = testAudioRef.current?.error?.code;\n      const errorMsg = errorMessages[errorCode] || 'Unknown audio error';\n      console.error('Detailed error:', errorMsg);\n    });\n    \n    // Set source and load\n    testAudioRef.current.src = audioUrl;\n    testAudioRef.current.load();\n\n    // Create new Howl instance with better error handling\n    soundRef.current = new Howl({\n      src: [audioUrl],\n      html5: true, // Use HTML5 Audio for better compatibility\n      format: ['mp3', 'wav', 'mpeg'], // Support multiple formats\n      volume: volume,\n      preload: true,\n      cors: true, // Enable CORS\n      onload: () => {\n        console.log('‚úÖ Howler: Audio loaded successfully');\n        console.log('Duration:', soundRef.current.duration());\n        setDuration(soundRef.current.duration());\n        setIsLoading(false);\n        setError(null);\n      },\n      onplay: () => {\n        console.log('‚úÖ Howler: Audio started playing');\n        setIsPlaying(true);\n        setIsLoading(false);\n        setError(null);\n        startTimeTracking();\n        if (track && track.id) {\n          incrementPlayCount(track);\n        }\n      },\n      onpause: () => {\n        console.log('‚è∏Ô∏è Howler: Audio paused');\n        setIsPlaying(false);\n        clearInterval(intervalRef.current);\n      },\n      onend: () => {\n        console.log('üîö Howler: Audio ended');\n        setIsPlaying(false);\n        setCurrentTime(0);\n        clearInterval(intervalRef.current);\n        handleTrackEnd();\n      },\n      onloaderror: (id, error) => {\n        console.error('‚ùå Howler: Audio load error:', error);\n        console.error('‚ùå Howler: Error ID:', id);\n        console.error('‚ùå Howler: Full error object:', error);\n        \n        // More specific error messages\n        let errorMsg = 'Failed to load audio file.';\n        if (typeof error === 'string' && error.includes('404')) {\n          errorMsg = 'Audio file not found (404). The track may have been moved or deleted.';\n        } else if (typeof error === 'string' && error.includes('CORS')) {\n          errorMsg = 'Cross-origin request blocked. Please contact support.';\n        } else if (typeof error === 'string' && error.includes('network')) {\n          errorMsg = 'Network error. Please check your connection and try again.';\n        }\n        \n        setError(errorMsg);\n        setIsLoading(false);\n        setIsPlaying(false);\n      },\n      onplayerror: (id, error) => {\n        console.error('‚ùå Howler: Audio play error:', error);\n        console.error('‚ùå Howler: Error ID:', id);\n        \n        let errorMsg = 'Failed to play audio.';\n        if (typeof error === 'string' && error.includes('NotAllowedError')) {\n          errorMsg = 'Playback blocked by browser. Please click play again to allow audio.';\n        } else if (typeof error === 'string' && error.includes('decode')) {\n          errorMsg = 'Audio file is corrupted or in an unsupported format.';\n        }\n        \n        setError(errorMsg);\n        setIsLoading(false);\n        setIsPlaying(false);\n      },\n      onerror: (error) => {\n        console.error('‚ùå Howler: General audio error:', error);\n        setError('An audio error occurred. Please try refreshing the page.');\n        setIsLoading(false);\n        setIsPlaying(false);\n      },\n    });\n\n    console.log('üîÑ Howler instance created, attempting to play...');\n    try {\n      // Add a small delay to ensure the audio is properly loaded\n      setTimeout(() => {\n        if (soundRef.current && soundRef.current.state() === 'loaded') {\n          const playResult = soundRef.current.play();\n          console.log('Play result:', playResult);\n        }\n      }, 100);\n    } catch (error) {\n      console.error('‚ùå Play attempt failed:', error);\n      setError('Failed to start playback. Please try again.');\n      setIsLoading(false);\n      setIsPlaying(false);\n    }\n  };\n\n  const handleTrackEnd = () => {\n    try {\n      if (repeatMode === 'one') {\n        // Replay current track\n        if (soundRef.current && soundRef.current.state() === 'loaded') {\n          soundRef.current.seek(0);\n          soundRef.current.play();\n        }\n      } else if (repeatMode === 'all' || queue.length > currentIndex + 1) {\n        playNext();\n      }\n    } catch (error) {\n      console.error('‚ùå Error in handleTrackEnd:', error);\n      setIsPlaying(false);\n    }\n  };\n\n  const startTimeTracking = () => {\n    intervalRef.current = setInterval(() => {\n      if (soundRef.current && soundRef.current.playing()) {\n        setCurrentTime(soundRef.current.seek());\n      }\n    }, 1000);\n  };\n\n  const togglePlayPause = () => {\n    if (soundRef.current && soundRef.current.state() === 'loaded') {\n      try {\n        if (isPlaying) {\n          soundRef.current.pause();\n        } else {\n          // Check if the sound is still valid before playing\n          if (soundRef.current._src) {\n            const playPromise = soundRef.current.play();\n            if (playPromise !== undefined) {\n              // Handle the promise if returned\n              console.log('Play initiated successfully');\n            }\n          }\n        }\n      } catch (error) {\n        console.error('‚ùå Error in togglePlayPause:', error);\n        setIsPlaying(false);\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const seek = (time) => {\n    if (soundRef.current) {\n      soundRef.current.seek(time);\n      setCurrentTime(time);\n    }\n  };\n\n  const changeVolume = (newVolume) => {\n    setVolume(newVolume);\n    if (soundRef.current) {\n      soundRef.current.volume(newVolume);\n    }\n  };\n\n  const playNext = () => {\n    if (queue.length > 0) {\n      let nextIndex;\n      \n      if (shuffleMode) {\n        // Random next track\n        nextIndex = Math.floor(Math.random() * queue.length);\n      } else if (currentIndex < queue.length - 1) {\n        nextIndex = currentIndex + 1;\n      } else if (repeatMode === 'all') {\n        nextIndex = 0; // Loop back to start\n      } else {\n        return; // No next track\n      }\n      \n      const nextTrack = queue[nextIndex];\n      playTrack(nextTrack, queue);\n    }\n  };\n\n  const playPrevious = () => {\n    if (queue.length > 0) {\n      let prevIndex;\n      \n      if (shuffleMode) {\n        // Random previous track\n        prevIndex = Math.floor(Math.random() * queue.length);\n      } else if (currentIndex > 0) {\n        prevIndex = currentIndex - 1;\n      } else if (repeatMode === 'all') {\n        prevIndex = queue.length - 1; // Loop to end\n      } else {\n        return; // No previous track\n      }\n      \n      const prevTrack = queue[prevIndex];\n      playTrack(prevTrack, queue);\n    }\n  };\n\n  const toggleShuffle = () => {\n    setShuffleMode(!shuffleMode);\n  };\n\n  const setRepeat = (mode) => {\n    setRepeatMode(mode);\n  };\n\n  const addToQueue = (track) => {\n    setQueue(prev => [...prev, track]);\n  };\n\n  const removeFromQueue = (trackId) => {\n    setQueue(prev => prev.filter(track => track.id !== trackId));\n  };\n\n  const clearQueue = () => {\n    setQueue([]);\n    setCurrentIndex(0);\n  };\n\n  const stop = () => {\n    cleanupAudio();\n    setCurrentTrack(null);\n    setIsPlaying(false);\n    setCurrentTime(0);\n    setIsLoading(false);\n  };\n\n  const value = {\n    currentTrack,\n    isPlaying,\n    volume,\n    currentTime,\n    duration,\n    queue,\n    currentIndex,\n    shuffleMode,\n    repeatMode,\n    isLoading,\n    error,\n    playTrack,\n    togglePlayPause,\n    stop,\n    seek,\n    changeVolume,\n    playNext,\n    playPrevious,\n    addToQueue,\n    removeFromQueue,\n    clearQueue,\n    toggleShuffle,\n    setRepeat\n  };\n\n  return (\n    <PlayerContext.Provider value={value}>\n      {children}\n    </PlayerContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}