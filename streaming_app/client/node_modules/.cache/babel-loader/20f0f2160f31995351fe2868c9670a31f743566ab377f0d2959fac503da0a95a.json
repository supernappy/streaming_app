{"ast":null,"code":"import{useEffect,useState}from'react';import{usePlayer}from'../contexts/PlayerContext';import{useSocket}from'../contexts/SocketContext_enhanced';// Keeps a local list of tracks in sync with live play_count updates from PlayerContext/socket\nexport default function useSyncTrackCounts(){let initialTracks=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];const{socket}=(useSocket===null||useSocket===void 0?void 0:useSocket())||{};const{currentTrack}=usePlayer();const[tracks,setTracks]=useState(initialTracks);// Update local list when initial prop changes\nuseEffect(()=>{setTracks(initialTracks);},[initialTracks]);// Merge in play_count whenever PlayerContext currentTrack updates\nuseEffect(()=>{if(!(currentTrack!==null&&currentTrack!==void 0&&currentTrack.id)||typeof currentTrack.play_count==='undefined')return;setTracks(prev=>prev.map(t=>t.id===currentTrack.id?{...t,play_count:currentTrack.play_count}:t));},[currentTrack===null||currentTrack===void 0?void 0:currentTrack.id,currentTrack===null||currentTrack===void 0?void 0:currentTrack.play_count]);// Also listen directly to socket global play-count updates to keep any list fresh\nuseEffect(()=>{if(!socket)return;const handler=_ref=>{let{trackId,play_count}=_ref;setTracks(prev=>prev.map(t=>t.id===trackId?{...t,play_count}:t));};socket.on('track:play-count-updated',handler);return()=>socket.off('track:play-count-updated',handler);},[socket]);return[tracks,setTracks];}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}