{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { usePlayer } from '../contexts/PlayerContext';\nimport { useSocket } from '../contexts/SocketContext_enhanced';\n\n// Keeps a local list of tracks in sync with live play_count updates from PlayerContext/socket\nexport default function useSyncTrackCounts(initialTracks = []) {\n  _s();\n  const {\n    socket\n  } = (useSocket === null || useSocket === void 0 ? void 0 : useSocket()) || {};\n  const {\n    currentTrack\n  } = usePlayer();\n  const [tracks, setTracks] = useState(initialTracks);\n\n  // Update local list when initial prop changes\n  useEffect(() => {\n    setTracks(initialTracks);\n  }, [initialTracks]);\n\n  // Merge in play_count whenever PlayerContext currentTrack updates\n  useEffect(() => {\n    if (!(currentTrack !== null && currentTrack !== void 0 && currentTrack.id) || typeof currentTrack.play_count === 'undefined') return;\n    setTracks(prev => prev.map(t => t.id === currentTrack.id ? {\n      ...t,\n      play_count: currentTrack.play_count\n    } : t));\n  }, [currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.id, currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.play_count]);\n\n  // Also listen directly to socket global play-count updates to keep any list fresh\n  useEffect(() => {\n    if (!socket) return;\n    const handler = ({\n      trackId,\n      play_count\n    }) => {\n      setTracks(prev => prev.map(t => t.id === trackId ? {\n        ...t,\n        play_count\n      } : t));\n    };\n    socket.on('track:play-count-updated', handler);\n    return () => socket.off('track:play-count-updated', handler);\n  }, [socket]);\n  return [tracks, setTracks];\n}\n_s(useSyncTrackCounts, \"MUOsVc5ZTGhA3S6+Q13xZqQF0rw=\", false, function () {\n  return [usePlayer];\n});","map":{"version":3,"names":["useEffect","useState","usePlayer","useSocket","useSyncTrackCounts","initialTracks","_s","socket","currentTrack","tracks","setTracks","id","play_count","prev","map","t","handler","trackId","on","off"],"sources":["/Users/walesolagbade/streaming_app/client/src/hooks/useSyncTrackCounts.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { usePlayer } from '../contexts/PlayerContext';\nimport { useSocket } from '../contexts/SocketContext_enhanced';\n\n// Keeps a local list of tracks in sync with live play_count updates from PlayerContext/socket\nexport default function useSyncTrackCounts(initialTracks = []) {\n  const { socket } = useSocket?.() || {};\n  const { currentTrack } = usePlayer();\n  const [tracks, setTracks] = useState(initialTracks);\n\n  // Update local list when initial prop changes\n  useEffect(() => {\n    setTracks(initialTracks);\n  }, [initialTracks]);\n\n  // Merge in play_count whenever PlayerContext currentTrack updates\n  useEffect(() => {\n    if (!currentTrack?.id || typeof currentTrack.play_count === 'undefined') return;\n    setTracks(prev => prev.map(t => t.id === currentTrack.id ? { ...t, play_count: currentTrack.play_count } : t));\n  }, [currentTrack?.id, currentTrack?.play_count]);\n\n  // Also listen directly to socket global play-count updates to keep any list fresh\n  useEffect(() => {\n    if (!socket) return;\n    const handler = ({ trackId, play_count }) => {\n      setTracks(prev => prev.map(t => t.id === trackId ? { ...t, play_count } : t));\n    };\n    socket.on('track:play-count-updated', handler);\n    return () => socket.off('track:play-count-updated', handler);\n  }, [socket]);\n\n  return [tracks, setTracks];\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,2BAA2B;AACrD,SAASC,SAAS,QAAQ,oCAAoC;;AAE9D;AACA,eAAe,SAASC,kBAAkBA,CAACC,aAAa,GAAG,EAAE,EAAE;EAAAC,EAAA;EAC7D,MAAM;IAAEC;EAAO,CAAC,GAAG,CAAAJ,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAG,CAAC,KAAI,CAAC,CAAC;EACtC,MAAM;IAAEK;EAAa,CAAC,GAAGN,SAAS,CAAC,CAAC;EACpC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAACI,aAAa,CAAC;;EAEnD;EACAL,SAAS,CAAC,MAAM;IACdU,SAAS,CAACL,aAAa,CAAC;EAC1B,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;;EAEnB;EACAL,SAAS,CAAC,MAAM;IACd,IAAI,EAACQ,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAEG,EAAE,KAAI,OAAOH,YAAY,CAACI,UAAU,KAAK,WAAW,EAAE;IACzEF,SAAS,CAACG,IAAI,IAAIA,IAAI,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACJ,EAAE,KAAKH,YAAY,CAACG,EAAE,GAAG;MAAE,GAAGI,CAAC;MAAEH,UAAU,EAAEJ,YAAY,CAACI;IAAW,CAAC,GAAGG,CAAC,CAAC,CAAC;EAChH,CAAC,EAAE,CAACP,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEG,EAAE,EAAEH,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEI,UAAU,CAAC,CAAC;;EAEhD;EACAZ,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,MAAM,EAAE;IACb,MAAMS,OAAO,GAAGA,CAAC;MAAEC,OAAO;MAAEL;IAAW,CAAC,KAAK;MAC3CF,SAAS,CAACG,IAAI,IAAIA,IAAI,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACJ,EAAE,KAAKM,OAAO,GAAG;QAAE,GAAGF,CAAC;QAAEH;MAAW,CAAC,GAAGG,CAAC,CAAC,CAAC;IAC/E,CAAC;IACDR,MAAM,CAACW,EAAE,CAAC,0BAA0B,EAAEF,OAAO,CAAC;IAC9C,OAAO,MAAMT,MAAM,CAACY,GAAG,CAAC,0BAA0B,EAAEH,OAAO,CAAC;EAC9D,CAAC,EAAE,CAACT,MAAM,CAAC,CAAC;EAEZ,OAAO,CAACE,MAAM,EAAEC,SAAS,CAAC;AAC5B;AAACJ,EAAA,CA3BuBF,kBAAkB;EAAA,QAEfF,SAAS;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}