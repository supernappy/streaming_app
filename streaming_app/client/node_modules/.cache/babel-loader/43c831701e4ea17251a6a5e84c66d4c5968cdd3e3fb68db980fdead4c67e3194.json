{"ast":null,"code":"// Shared formatting helpers\n// Format numbers with compact notation (e.g., 1.2k, 3.4M)\nexport function formatNumberCompact(value){try{const n=typeof value==='number'?value:Number(value)||0;return new Intl.NumberFormat(undefined,{notation:'compact',maximumFractionDigits:1}).format(n);}catch(_){// Fallback simple formatter\nconst n=typeof value==='number'?value:Number(value)||0;if(n>=1000000)return\"\".concat((n/1000000).toFixed(1),\"M\");if(n>=1000)return\"\".concat((n/1000).toFixed(1),\"k\");return String(n);}}// Format plays with pluralization and compact numbers\nexport function formatPlays(value){const n=typeof value==='number'?value:Number(value)||0;const compact=formatNumberCompact(n);const label=n===1?'play':'plays';return\"\".concat(compact,\" \").concat(label);}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}