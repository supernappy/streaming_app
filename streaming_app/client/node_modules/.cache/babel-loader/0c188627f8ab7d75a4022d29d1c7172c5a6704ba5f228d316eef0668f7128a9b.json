{"ast":null,"code":"var _jsxFileName = \"/Users/walesolagbade/streaming_app/client/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [rememberedCredentials, setRememberedCredentials] = useState(() => {\n    const saved = localStorage.getItem('rememberedCredentials');\n    return saved ? JSON.parse(saved) : null;\n  });\n\n  // Check authentication status on app load\n  useEffect(() => {\n    const checkAuth = async () => {\n      const storedToken = localStorage.getItem('token');\n      const storedUser = localStorage.getItem('user');\n      if (storedToken && storedUser) {\n        try {\n          setToken(storedToken);\n          setUser(JSON.parse(storedUser));\n        } catch (error) {\n          console.error('Failed to parse stored user data:', error);\n          logout();\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n  const saveCredentials = (email, password, remember) => {\n    if (remember) {\n      const credentials = {\n        email,\n        password\n      };\n      localStorage.setItem('rememberedCredentials', JSON.stringify(credentials));\n      localStorage.setItem('rememberMe', 'true');\n      setRememberedCredentials(credentials);\n    } else {\n      localStorage.removeItem('rememberedCredentials');\n      localStorage.removeItem('rememberMe');\n      setRememberedCredentials(null);\n    }\n  };\n  const getRememberedCredentials = () => {\n    const isRememberEnabled = localStorage.getItem('rememberMe') === 'true';\n    if (isRememberEnabled && rememberedCredentials) {\n      return rememberedCredentials;\n    }\n    return null;\n  };\n  const login = async (email, password, rememberMe = false) => {\n    try {\n      console.log('🔐 LOGIN DEBUG: Attempting login with:', {\n        email,\n        password: '***'\n      });\n      console.log('🔐 LOGIN DEBUG: API URL:', process.env.REACT_APP_API_URL);\n      const response = await authAPI.login(email, password);\n      console.log('🔐 LOGIN DEBUG: Login response:', response);\n      const {\n        user,\n        token\n      } = response.data;\n      setUser(user);\n      setToken(token);\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // Save credentials if remember me is checked\n      saveCredentials(email, password, rememberMe);\n      console.log('🔐 LOGIN DEBUG: Login successful, user set:', user);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('🔐 LOGIN DEBUG: Login error:', error);\n      console.error('🔐 LOGIN DEBUG: Error response:', error.response);\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Login failed'\n      };\n    }\n  };\n  const register = async (email, username, password) => {\n    try {\n      const response = await authAPI.register({\n        email,\n        username,\n        password\n      });\n      const {\n        user,\n        token\n      } = response.data;\n      setUser(user);\n      setToken(token);\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Registration failed'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    // Note: We keep remembered credentials for next login unless user explicitly unchecks remember me\n  };\n  const clearRememberedCredentials = () => {\n    localStorage.removeItem('rememberedCredentials');\n    localStorage.removeItem('rememberMe');\n    setRememberedCredentials(null);\n  };\n  const updateUser = updatedUser => {\n    setUser(updatedUser);\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n    console.log('🔄 User updated in context:', updatedUser);\n  };\n  const value = {\n    user,\n    token,\n    login,\n    register,\n    logout,\n    updateUser,\n    loading,\n    isAuthenticated: !!user,\n    rememberedCredentials,\n    getRememberedCredentials,\n    clearRememberedCredentials,\n    saveCredentials\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"aex0jJOd9XDi7lUIaetNTxA7nEg=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","setToken","localStorage","getItem","rememberedCredentials","setRememberedCredentials","saved","JSON","parse","checkAuth","storedToken","storedUser","error","console","logout","saveCredentials","email","password","remember","credentials","setItem","stringify","removeItem","getRememberedCredentials","isRememberEnabled","login","rememberMe","log","process","env","REACT_APP_API_URL","response","data","success","_error$response","_error$response$data","register","username","_error$response2","_error$response2$data","clearRememberedCredentials","updateUser","updatedUser","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/walesolagbade/streaming_app/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [rememberedCredentials, setRememberedCredentials] = useState(() => {\n    const saved = localStorage.getItem('rememberedCredentials');\n    return saved ? JSON.parse(saved) : null;\n  });\n\n  // Check authentication status on app load\n  useEffect(() => {\n    const checkAuth = async () => {\n      const storedToken = localStorage.getItem('token');\n      const storedUser = localStorage.getItem('user');\n      \n      if (storedToken && storedUser) {\n        try {\n          setToken(storedToken);\n          setUser(JSON.parse(storedUser));\n        } catch (error) {\n          console.error('Failed to parse stored user data:', error);\n          logout();\n        }\n      }\n      setLoading(false);\n    };\n\n    checkAuth();\n  }, []);\n\n  const saveCredentials = (email, password, remember) => {\n    if (remember) {\n      const credentials = { email, password };\n      localStorage.setItem('rememberedCredentials', JSON.stringify(credentials));\n      localStorage.setItem('rememberMe', 'true');\n      setRememberedCredentials(credentials);\n    } else {\n      localStorage.removeItem('rememberedCredentials');\n      localStorage.removeItem('rememberMe');\n      setRememberedCredentials(null);\n    }\n  };\n\n  const getRememberedCredentials = () => {\n    const isRememberEnabled = localStorage.getItem('rememberMe') === 'true';\n    if (isRememberEnabled && rememberedCredentials) {\n      return rememberedCredentials;\n    }\n    return null;\n  };\n\n  const login = async (email, password, rememberMe = false) => {\n    try {\n      console.log('🔐 LOGIN DEBUG: Attempting login with:', { email, password: '***' });\n      console.log('🔐 LOGIN DEBUG: API URL:', process.env.REACT_APP_API_URL);\n      \n      const response = await authAPI.login(email, password);\n      console.log('🔐 LOGIN DEBUG: Login response:', response);\n      \n      const { user, token } = response.data;\n      \n      setUser(user);\n      setToken(token);\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      // Save credentials if remember me is checked\n      saveCredentials(email, password, rememberMe);\n      \n      console.log('🔐 LOGIN DEBUG: Login successful, user set:', user);\n      return { success: true };\n    } catch (error) {\n      console.error('🔐 LOGIN DEBUG: Login error:', error);\n      console.error('🔐 LOGIN DEBUG: Error response:', error.response);\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Login failed'\n      };\n    }\n  };\n\n  const register = async (email, username, password) => {\n    try {\n      const response = await authAPI.register({\n        email,\n        username,\n        password\n      });\n      const { user, token } = response.data;\n      \n      setUser(user);\n      setToken(token);\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || 'Registration failed'\n      };\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    // Note: We keep remembered credentials for next login unless user explicitly unchecks remember me\n  };\n\n  const clearRememberedCredentials = () => {\n    localStorage.removeItem('rememberedCredentials');\n    localStorage.removeItem('rememberMe');\n    setRememberedCredentials(null);\n  };\n\n  const updateUser = (updatedUser) => {\n    setUser(updatedUser);\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n    console.log('🔄 User updated in context:', updatedUser);\n  };\n\n  const value = {\n    user,\n    token,\n    login,\n    register,\n    logout,\n    updateUser,\n    loading,\n    isAuthenticated: !!user,\n    rememberedCredentials,\n    getRememberedCredentials,\n    clearRememberedCredentials,\n    saveCredentials\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,OAAO,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAACmB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAM,CAACC,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGtB,QAAQ,CAAC,MAAM;IACvE,MAAMuB,KAAK,GAAGJ,YAAY,CAACC,OAAO,CAAC,uBAAuB,CAAC;IAC3D,OAAOG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACF,KAAK,CAAC,GAAG,IAAI;EACzC,CAAC,CAAC;;EAEF;EACAtB,SAAS,CAAC,MAAM;IACd,MAAMyB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,WAAW,GAAGR,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MACjD,MAAMQ,UAAU,GAAGT,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAE/C,IAAIO,WAAW,IAAIC,UAAU,EAAE;QAC7B,IAAI;UACFV,QAAQ,CAACS,WAAW,CAAC;UACrBb,OAAO,CAACU,IAAI,CAACC,KAAK,CAACG,UAAU,CAAC,CAAC;QACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;UACzDE,MAAM,CAAC,CAAC;QACV;MACF;MACAf,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IAEDU,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,eAAe,GAAGA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;IACrD,IAAIA,QAAQ,EAAE;MACZ,MAAMC,WAAW,GAAG;QAAEH,KAAK;QAAEC;MAAS,CAAC;MACvCf,YAAY,CAACkB,OAAO,CAAC,uBAAuB,EAAEb,IAAI,CAACc,SAAS,CAACF,WAAW,CAAC,CAAC;MAC1EjB,YAAY,CAACkB,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;MAC1Cf,wBAAwB,CAACc,WAAW,CAAC;IACvC,CAAC,MAAM;MACLjB,YAAY,CAACoB,UAAU,CAAC,uBAAuB,CAAC;MAChDpB,YAAY,CAACoB,UAAU,CAAC,YAAY,CAAC;MACrCjB,wBAAwB,CAAC,IAAI,CAAC;IAChC;EACF,CAAC;EAED,MAAMkB,wBAAwB,GAAGA,CAAA,KAAM;IACrC,MAAMC,iBAAiB,GAAGtB,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,KAAK,MAAM;IACvE,IAAIqB,iBAAiB,IAAIpB,qBAAqB,EAAE;MAC9C,OAAOA,qBAAqB;IAC9B;IACA,OAAO,IAAI;EACb,CAAC;EAED,MAAMqB,KAAK,GAAG,MAAAA,CAAOT,KAAK,EAAEC,QAAQ,EAAES,UAAU,GAAG,KAAK,KAAK;IAC3D,IAAI;MACFb,OAAO,CAACc,GAAG,CAAC,wCAAwC,EAAE;QAAEX,KAAK;QAAEC,QAAQ,EAAE;MAAM,CAAC,CAAC;MACjFJ,OAAO,CAACc,GAAG,CAAC,0BAA0B,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAAC;MAEtE,MAAMC,QAAQ,GAAG,MAAM9C,OAAO,CAACwC,KAAK,CAACT,KAAK,EAAEC,QAAQ,CAAC;MACrDJ,OAAO,CAACc,GAAG,CAAC,iCAAiC,EAAEI,QAAQ,CAAC;MAExD,MAAM;QAAEnC,IAAI;QAAEI;MAAM,CAAC,GAAG+B,QAAQ,CAACC,IAAI;MAErCnC,OAAO,CAACD,IAAI,CAAC;MACbK,QAAQ,CAACD,KAAK,CAAC;MACfE,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEpB,KAAK,CAAC;MACpCE,YAAY,CAACkB,OAAO,CAAC,MAAM,EAAEb,IAAI,CAACc,SAAS,CAACzB,IAAI,CAAC,CAAC;;MAElD;MACAmB,eAAe,CAACC,KAAK,EAAEC,QAAQ,EAAES,UAAU,CAAC;MAE5Cb,OAAO,CAACc,GAAG,CAAC,6CAA6C,EAAE/B,IAAI,CAAC;MAChE,OAAO;QAAEqC,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOrB,KAAK,EAAE;MAAA,IAAAsB,eAAA,EAAAC,oBAAA;MACdtB,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACmB,QAAQ,CAAC;MAChE,OAAO;QACLE,OAAO,EAAE,KAAK;QACdrB,KAAK,EAAE,EAAAsB,eAAA,GAAAtB,KAAK,CAACmB,QAAQ,cAAAG,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBvB,KAAK,KAAI;MACxC,CAAC;IACH;EACF,CAAC;EAED,MAAMwB,QAAQ,GAAG,MAAAA,CAAOpB,KAAK,EAAEqB,QAAQ,EAAEpB,QAAQ,KAAK;IACpD,IAAI;MACF,MAAMc,QAAQ,GAAG,MAAM9C,OAAO,CAACmD,QAAQ,CAAC;QACtCpB,KAAK;QACLqB,QAAQ;QACRpB;MACF,CAAC,CAAC;MACF,MAAM;QAAErB,IAAI;QAAEI;MAAM,CAAC,GAAG+B,QAAQ,CAACC,IAAI;MAErCnC,OAAO,CAACD,IAAI,CAAC;MACbK,QAAQ,CAACD,KAAK,CAAC;MACfE,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEpB,KAAK,CAAC;MACpCE,YAAY,CAACkB,OAAO,CAAC,MAAM,EAAEb,IAAI,CAACc,SAAS,CAACzB,IAAI,CAAC,CAAC;MAElD,OAAO;QAAEqC,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOrB,KAAK,EAAE;MAAA,IAAA0B,gBAAA,EAAAC,qBAAA;MACd,OAAO;QACLN,OAAO,EAAE,KAAK;QACdrB,KAAK,EAAE,EAAA0B,gBAAA,GAAA1B,KAAK,CAACmB,QAAQ,cAAAO,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBN,IAAI,cAAAO,qBAAA,uBAApBA,qBAAA,CAAsB3B,KAAK,KAAI;MACxC,CAAC;IACH;EACF,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBjB,OAAO,CAAC,IAAI,CAAC;IACbI,QAAQ,CAAC,IAAI,CAAC;IACdC,YAAY,CAACoB,UAAU,CAAC,OAAO,CAAC;IAChCpB,YAAY,CAACoB,UAAU,CAAC,MAAM,CAAC;IAC/B;EACF,CAAC;EAED,MAAMkB,0BAA0B,GAAGA,CAAA,KAAM;IACvCtC,YAAY,CAACoB,UAAU,CAAC,uBAAuB,CAAC;IAChDpB,YAAY,CAACoB,UAAU,CAAC,YAAY,CAAC;IACrCjB,wBAAwB,CAAC,IAAI,CAAC;EAChC,CAAC;EAED,MAAMoC,UAAU,GAAIC,WAAW,IAAK;IAClC7C,OAAO,CAAC6C,WAAW,CAAC;IACpBxC,YAAY,CAACkB,OAAO,CAAC,MAAM,EAAEb,IAAI,CAACc,SAAS,CAACqB,WAAW,CAAC,CAAC;IACzD7B,OAAO,CAACc,GAAG,CAAC,6BAA6B,EAAEe,WAAW,CAAC;EACzD,CAAC;EAED,MAAMC,KAAK,GAAG;IACZ/C,IAAI;IACJI,KAAK;IACLyB,KAAK;IACLW,QAAQ;IACRtB,MAAM;IACN2B,UAAU;IACV3C,OAAO;IACP8C,eAAe,EAAE,CAAC,CAAChD,IAAI;IACvBQ,qBAAqB;IACrBmB,wBAAwB;IACxBiB,0BAA0B;IAC1BzB;EACF,CAAC;EAED,oBACE5B,OAAA,CAACC,WAAW,CAACyD,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAjD,QAAA,EAChCA;EAAQ;IAAAoD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACtD,GAAA,CAhJWF,YAAY;AAAAyD,EAAA,GAAZzD,YAAY;AAAA,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}