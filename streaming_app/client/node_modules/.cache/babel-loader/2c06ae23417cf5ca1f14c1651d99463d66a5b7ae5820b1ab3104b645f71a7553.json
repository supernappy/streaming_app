{"ast":null,"code":"var _jsxFileName = \"/Users/walesolagbade/streaming_app/client/src/contexts/PlayerContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useRef, useEffect } from 'react';\nimport { Howl } from 'howler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerContext = /*#__PURE__*/createContext();\nexport const usePlayer = () => {\n  _s();\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n};\n_s(usePlayer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const PlayerProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(0.8);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [queue, setQueue] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [shuffleMode, setShuffleMode] = useState(false);\n  const [repeatMode, setRepeatMode] = useState('off'); // 'off', 'all', 'one'\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const soundRef = useRef(null);\n  const intervalRef = useRef(null);\n  const testAudioRef = useRef(null);\n\n  // Cleanup function to properly stop and dispose of audio resources\n  const cleanupAudio = () => {\n    if (soundRef.current) {\n      try {\n        soundRef.current.stop();\n        soundRef.current.unload();\n      } catch (error) {\n        console.warn('Error during Howl cleanup:', error);\n      }\n      soundRef.current = null;\n    }\n    if (testAudioRef.current) {\n      try {\n        testAudioRef.current.pause();\n        testAudioRef.current.src = '';\n        testAudioRef.current.load();\n      } catch (error) {\n        console.warn('Error during HTML5 audio cleanup:', error);\n      }\n      testAudioRef.current = null;\n    }\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      cleanupAudio();\n    };\n  }, []);\n  const playTrack = (track, trackList = []) => {\n    console.log('=== PLAYER DEBUG ===');\n    console.log('Attempting to play track:', track);\n    console.log('Track file_url:', track.file_url);\n    console.log('Track hls_url:', track.hls_url);\n\n    // Clean up any existing audio resources first\n    cleanupAudio();\n    setError(null); // Clear any previous errors\n\n    setIsLoading(true);\n    setCurrentTrack(track);\n    setQueue(trackList);\n    setCurrentIndex(trackList.findIndex(t => t.id === track.id));\n    const audioUrl = track.hls_url || track.file_url;\n    console.log('Using audio URL:', audioUrl);\n\n    // Test direct HTML5 audio first\n    testAudioRef.current = new Audio();\n    testAudioRef.current.crossOrigin = 'anonymous';\n    testAudioRef.current.preload = 'metadata';\n    testAudioRef.current.addEventListener('canplay', () => {\n      console.log('✅ HTML5 Audio can play this file');\n    });\n    testAudioRef.current.addEventListener('error', e => {\n      var _testAudioRef$current, _testAudioRef$current2, _testAudioRef$current3, _testAudioRef$current4;\n      console.error('❌ HTML5 Audio error:', e);\n      console.error('Audio error code:', (_testAudioRef$current = testAudioRef.current) === null || _testAudioRef$current === void 0 ? void 0 : (_testAudioRef$current2 = _testAudioRef$current.error) === null || _testAudioRef$current2 === void 0 ? void 0 : _testAudioRef$current2.code);\n      console.error('Audio error message:', (_testAudioRef$current3 = testAudioRef.current) === null || _testAudioRef$current3 === void 0 ? void 0 : (_testAudioRef$current4 = _testAudioRef$current3.error) === null || _testAudioRef$current4 === void 0 ? void 0 : _testAudioRef$current4.message);\n    });\n\n    // Set source and load\n    testAudioRef.current.src = audioUrl;\n    testAudioRef.current.load();\n\n    // Create new Howl instance\n    soundRef.current = new Howl({\n      src: [audioUrl],\n      html5: true,\n      format: ['mp3'],\n      volume: volume,\n      preload: true,\n      onload: () => {\n        console.log('✅ Howler: Audio loaded successfully');\n        console.log('Duration:', soundRef.current.duration());\n        setDuration(soundRef.current.duration());\n        setIsLoading(false);\n      },\n      onplay: () => {\n        console.log('✅ Howler: Audio started playing');\n        setIsPlaying(true);\n        setIsLoading(false);\n        startTimeTracking();\n      },\n      onpause: () => {\n        setIsPlaying(false);\n        clearInterval(intervalRef.current);\n      },\n      onend: () => {\n        setIsPlaying(false);\n        setCurrentTime(0);\n        clearInterval(intervalRef.current);\n        handleTrackEnd();\n      },\n      onloaderror: (id, error) => {\n        console.error('❌ Howler: Audio load error:', error);\n        console.error('❌ Howler: Error ID:', id);\n        console.error('❌ Howler: Full error object:', error);\n        setError('Failed to load audio file. Please check the file format or try another track.');\n        setIsLoading(false);\n        setIsPlaying(false);\n      },\n      onplayerror: (id, error) => {\n        console.error('❌ Howler: Audio play error:', error);\n        console.error('❌ Howler: Error ID:', id);\n        setError('Failed to play audio. This might be due to browser restrictions or file corruption.');\n        setIsLoading(false);\n        setIsPlaying(false);\n      },\n      onerror: error => {\n        console.error('❌ Howler: General audio error:', error);\n        setError('An audio error occurred. Please try refreshing the page.');\n        setIsPlaying(false);\n        setIsLoading(false);\n        clearInterval(intervalRef.current);\n      }\n    });\n    console.log('🔄 Howler instance created, attempting to play...');\n    try {\n      // Add a small delay to ensure the audio is properly loaded\n      setTimeout(() => {\n        if (soundRef.current && soundRef.current.state() === 'loaded') {\n          const playResult = soundRef.current.play();\n          console.log('Play result:', playResult);\n        }\n      }, 100);\n    } catch (error) {\n      console.error('❌ Play attempt failed:', error);\n      setError('Failed to start playback. Please try again.');\n      setIsLoading(false);\n      setIsPlaying(false);\n    }\n  };\n  const handleTrackEnd = () => {\n    try {\n      if (repeatMode === 'one') {\n        // Replay current track\n        if (soundRef.current && soundRef.current.state() === 'loaded') {\n          soundRef.current.seek(0);\n          soundRef.current.play();\n        }\n      } else if (repeatMode === 'all' || queue.length > currentIndex + 1) {\n        playNext();\n      }\n    } catch (error) {\n      console.error('❌ Error in handleTrackEnd:', error);\n      setIsPlaying(false);\n    }\n  };\n  const startTimeTracking = () => {\n    intervalRef.current = setInterval(() => {\n      if (soundRef.current && soundRef.current.playing()) {\n        setCurrentTime(soundRef.current.seek());\n      }\n    }, 1000);\n  };\n  const togglePlayPause = () => {\n    if (soundRef.current && soundRef.current.state() === 'loaded') {\n      try {\n        if (isPlaying) {\n          soundRef.current.pause();\n        } else {\n          // Check if the sound is still valid before playing\n          if (soundRef.current._src) {\n            const playPromise = soundRef.current.play();\n            if (playPromise !== undefined) {\n              // Handle the promise if returned\n              console.log('Play initiated successfully');\n            }\n          }\n        }\n      } catch (error) {\n        console.error('❌ Error in togglePlayPause:', error);\n        setIsPlaying(false);\n        setIsLoading(false);\n      }\n    }\n  };\n  const seek = time => {\n    if (soundRef.current) {\n      soundRef.current.seek(time);\n      setCurrentTime(time);\n    }\n  };\n  const changeVolume = newVolume => {\n    setVolume(newVolume);\n    if (soundRef.current) {\n      soundRef.current.volume(newVolume);\n    }\n  };\n  const playNext = () => {\n    if (queue.length > 0) {\n      let nextIndex;\n      if (shuffleMode) {\n        // Random next track\n        nextIndex = Math.floor(Math.random() * queue.length);\n      } else if (currentIndex < queue.length - 1) {\n        nextIndex = currentIndex + 1;\n      } else if (repeatMode === 'all') {\n        nextIndex = 0; // Loop back to start\n      } else {\n        return; // No next track\n      }\n      const nextTrack = queue[nextIndex];\n      playTrack(nextTrack, queue);\n    }\n  };\n  const playPrevious = () => {\n    if (queue.length > 0) {\n      let prevIndex;\n      if (shuffleMode) {\n        // Random previous track\n        prevIndex = Math.floor(Math.random() * queue.length);\n      } else if (currentIndex > 0) {\n        prevIndex = currentIndex - 1;\n      } else if (repeatMode === 'all') {\n        prevIndex = queue.length - 1; // Loop to end\n      } else {\n        return; // No previous track\n      }\n      const prevTrack = queue[prevIndex];\n      playTrack(prevTrack, queue);\n    }\n  };\n  const toggleShuffle = () => {\n    setShuffleMode(!shuffleMode);\n  };\n  const setRepeat = mode => {\n    setRepeatMode(mode);\n  };\n  const addToQueue = track => {\n    setQueue(prev => [...prev, track]);\n  };\n  const removeFromQueue = trackId => {\n    setQueue(prev => prev.filter(track => track.id !== trackId));\n  };\n  const clearQueue = () => {\n    setQueue([]);\n    setCurrentIndex(0);\n  };\n  const stop = () => {\n    cleanupAudio();\n    setCurrentTrack(null);\n    setIsPlaying(false);\n    setCurrentTime(0);\n    setIsLoading(false);\n  };\n  const value = {\n    currentTrack,\n    isPlaying,\n    volume,\n    currentTime,\n    duration,\n    queue,\n    currentIndex,\n    shuffleMode,\n    repeatMode,\n    isLoading,\n    error,\n    playTrack,\n    togglePlayPause,\n    stop,\n    seek,\n    changeVolume,\n    playNext,\n    playPrevious,\n    addToQueue,\n    removeFromQueue,\n    clearQueue,\n    toggleShuffle,\n    setRepeat\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 5\n  }, this);\n};\n_s2(PlayerProvider, \"5TP8Ufp9D7ahj9IEARye80tLyTs=\");\n_c = PlayerProvider;\nvar _c;\n$RefreshReg$(_c, \"PlayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useRef","useEffect","Howl","jsxDEV","_jsxDEV","PlayerContext","usePlayer","_s","context","Error","PlayerProvider","children","_s2","currentTrack","setCurrentTrack","isPlaying","setIsPlaying","volume","setVolume","currentTime","setCurrentTime","duration","setDuration","queue","setQueue","currentIndex","setCurrentIndex","shuffleMode","setShuffleMode","repeatMode","setRepeatMode","isLoading","setIsLoading","error","setError","soundRef","intervalRef","testAudioRef","cleanupAudio","current","stop","unload","console","warn","pause","src","load","clearInterval","playTrack","track","trackList","log","file_url","hls_url","findIndex","t","id","audioUrl","Audio","crossOrigin","preload","addEventListener","e","_testAudioRef$current","_testAudioRef$current2","_testAudioRef$current3","_testAudioRef$current4","code","message","html5","format","onload","onplay","startTimeTracking","onpause","onend","handleTrackEnd","onloaderror","onplayerror","onerror","setTimeout","state","playResult","play","seek","length","playNext","setInterval","playing","togglePlayPause","_src","playPromise","undefined","time","changeVolume","newVolume","nextIndex","Math","floor","random","nextTrack","playPrevious","prevIndex","prevTrack","toggleShuffle","setRepeat","mode","addToQueue","prev","removeFromQueue","trackId","filter","clearQueue","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/walesolagbade/streaming_app/client/src/contexts/PlayerContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useRef, useEffect } from 'react';\nimport { Howl } from 'howler';\n\nconst PlayerContext = createContext();\n\nexport const usePlayer = () => {\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n};\n\nexport const PlayerProvider = ({ children }) => {\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(0.8);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [queue, setQueue] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [shuffleMode, setShuffleMode] = useState(false);\n  const [repeatMode, setRepeatMode] = useState('off'); // 'off', 'all', 'one'\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  const soundRef = useRef(null);\n  const intervalRef = useRef(null);\n  const testAudioRef = useRef(null);\n\n  // Cleanup function to properly stop and dispose of audio resources\n  const cleanupAudio = () => {\n    if (soundRef.current) {\n      try {\n        soundRef.current.stop();\n        soundRef.current.unload();\n      } catch (error) {\n        console.warn('Error during Howl cleanup:', error);\n      }\n      soundRef.current = null;\n    }\n    \n    if (testAudioRef.current) {\n      try {\n        testAudioRef.current.pause();\n        testAudioRef.current.src = '';\n        testAudioRef.current.load();\n      } catch (error) {\n        console.warn('Error during HTML5 audio cleanup:', error);\n      }\n      testAudioRef.current = null;\n    }\n    \n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      cleanupAudio();\n    };\n  }, []);\n\n  const playTrack = (track, trackList = []) => {\n    console.log('=== PLAYER DEBUG ===');\n    console.log('Attempting to play track:', track);\n    console.log('Track file_url:', track.file_url);\n    console.log('Track hls_url:', track.hls_url);\n    \n    // Clean up any existing audio resources first\n    cleanupAudio();\n    setError(null); // Clear any previous errors\n\n    setIsLoading(true);\n    setCurrentTrack(track);\n    setQueue(trackList);\n    setCurrentIndex(trackList.findIndex(t => t.id === track.id));\n\n    const audioUrl = track.hls_url || track.file_url;\n    console.log('Using audio URL:', audioUrl);\n\n    // Test direct HTML5 audio first\n    testAudioRef.current = new Audio();\n    testAudioRef.current.crossOrigin = 'anonymous';\n    testAudioRef.current.preload = 'metadata';\n    \n    testAudioRef.current.addEventListener('canplay', () => {\n      console.log('✅ HTML5 Audio can play this file');\n    });\n    \n    testAudioRef.current.addEventListener('error', (e) => {\n      console.error('❌ HTML5 Audio error:', e);\n      console.error('Audio error code:', testAudioRef.current?.error?.code);\n      console.error('Audio error message:', testAudioRef.current?.error?.message);\n    });\n    \n    // Set source and load\n    testAudioRef.current.src = audioUrl;\n    testAudioRef.current.load();\n\n    // Create new Howl instance\n    soundRef.current = new Howl({\n      src: [audioUrl],\n      html5: true,\n      format: ['mp3'],\n      volume: volume,\n      preload: true,\n      onload: () => {\n        console.log('✅ Howler: Audio loaded successfully');\n        console.log('Duration:', soundRef.current.duration());\n        setDuration(soundRef.current.duration());\n        setIsLoading(false);\n      },\n      onplay: () => {\n        console.log('✅ Howler: Audio started playing');\n        setIsPlaying(true);\n        setIsLoading(false);\n        startTimeTracking();\n      },\n      onpause: () => {\n        setIsPlaying(false);\n        clearInterval(intervalRef.current);\n      },\n      onend: () => {\n        setIsPlaying(false);\n        setCurrentTime(0);\n        clearInterval(intervalRef.current);\n        handleTrackEnd();\n      },\n      onloaderror: (id, error) => {\n        console.error('❌ Howler: Audio load error:', error);\n        console.error('❌ Howler: Error ID:', id);\n        console.error('❌ Howler: Full error object:', error);\n        setError('Failed to load audio file. Please check the file format or try another track.');\n        setIsLoading(false);\n        setIsPlaying(false);\n      },\n      onplayerror: (id, error) => {\n        console.error('❌ Howler: Audio play error:', error);\n        console.error('❌ Howler: Error ID:', id);\n        setError('Failed to play audio. This might be due to browser restrictions or file corruption.');\n        setIsLoading(false);\n        setIsPlaying(false);\n      },\n      onerror: (error) => {\n        console.error('❌ Howler: General audio error:', error);\n        setError('An audio error occurred. Please try refreshing the page.');\n        setIsPlaying(false);\n        setIsLoading(false);\n        clearInterval(intervalRef.current);\n      }\n    });\n\n    console.log('🔄 Howler instance created, attempting to play...');\n    try {\n      // Add a small delay to ensure the audio is properly loaded\n      setTimeout(() => {\n        if (soundRef.current && soundRef.current.state() === 'loaded') {\n          const playResult = soundRef.current.play();\n          console.log('Play result:', playResult);\n        }\n      }, 100);\n    } catch (error) {\n      console.error('❌ Play attempt failed:', error);\n      setError('Failed to start playback. Please try again.');\n      setIsLoading(false);\n      setIsPlaying(false);\n    }\n  };\n\n  const handleTrackEnd = () => {\n    try {\n      if (repeatMode === 'one') {\n        // Replay current track\n        if (soundRef.current && soundRef.current.state() === 'loaded') {\n          soundRef.current.seek(0);\n          soundRef.current.play();\n        }\n      } else if (repeatMode === 'all' || queue.length > currentIndex + 1) {\n        playNext();\n      }\n    } catch (error) {\n      console.error('❌ Error in handleTrackEnd:', error);\n      setIsPlaying(false);\n    }\n  };\n\n  const startTimeTracking = () => {\n    intervalRef.current = setInterval(() => {\n      if (soundRef.current && soundRef.current.playing()) {\n        setCurrentTime(soundRef.current.seek());\n      }\n    }, 1000);\n  };\n\n  const togglePlayPause = () => {\n    if (soundRef.current && soundRef.current.state() === 'loaded') {\n      try {\n        if (isPlaying) {\n          soundRef.current.pause();\n        } else {\n          // Check if the sound is still valid before playing\n          if (soundRef.current._src) {\n            const playPromise = soundRef.current.play();\n            if (playPromise !== undefined) {\n              // Handle the promise if returned\n              console.log('Play initiated successfully');\n            }\n          }\n        }\n      } catch (error) {\n        console.error('❌ Error in togglePlayPause:', error);\n        setIsPlaying(false);\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const seek = (time) => {\n    if (soundRef.current) {\n      soundRef.current.seek(time);\n      setCurrentTime(time);\n    }\n  };\n\n  const changeVolume = (newVolume) => {\n    setVolume(newVolume);\n    if (soundRef.current) {\n      soundRef.current.volume(newVolume);\n    }\n  };\n\n  const playNext = () => {\n    if (queue.length > 0) {\n      let nextIndex;\n      \n      if (shuffleMode) {\n        // Random next track\n        nextIndex = Math.floor(Math.random() * queue.length);\n      } else if (currentIndex < queue.length - 1) {\n        nextIndex = currentIndex + 1;\n      } else if (repeatMode === 'all') {\n        nextIndex = 0; // Loop back to start\n      } else {\n        return; // No next track\n      }\n      \n      const nextTrack = queue[nextIndex];\n      playTrack(nextTrack, queue);\n    }\n  };\n\n  const playPrevious = () => {\n    if (queue.length > 0) {\n      let prevIndex;\n      \n      if (shuffleMode) {\n        // Random previous track\n        prevIndex = Math.floor(Math.random() * queue.length);\n      } else if (currentIndex > 0) {\n        prevIndex = currentIndex - 1;\n      } else if (repeatMode === 'all') {\n        prevIndex = queue.length - 1; // Loop to end\n      } else {\n        return; // No previous track\n      }\n      \n      const prevTrack = queue[prevIndex];\n      playTrack(prevTrack, queue);\n    }\n  };\n\n  const toggleShuffle = () => {\n    setShuffleMode(!shuffleMode);\n  };\n\n  const setRepeat = (mode) => {\n    setRepeatMode(mode);\n  };\n\n  const addToQueue = (track) => {\n    setQueue(prev => [...prev, track]);\n  };\n\n  const removeFromQueue = (trackId) => {\n    setQueue(prev => prev.filter(track => track.id !== trackId));\n  };\n\n  const clearQueue = () => {\n    setQueue([]);\n    setCurrentIndex(0);\n  };\n\n  const stop = () => {\n    cleanupAudio();\n    setCurrentTrack(null);\n    setIsPlaying(false);\n    setCurrentTime(0);\n    setIsLoading(false);\n  };\n\n  const value = {\n    currentTrack,\n    isPlaying,\n    volume,\n    currentTime,\n    duration,\n    queue,\n    currentIndex,\n    shuffleMode,\n    repeatMode,\n    isLoading,\n    error,\n    playTrack,\n    togglePlayPause,\n    stop,\n    seek,\n    changeVolume,\n    playNext,\n    playPrevious,\n    addToQueue,\n    removeFromQueue,\n    clearQueue,\n    toggleShuffle,\n    setRepeat\n  };\n\n  return (\n    <PlayerContext.Provider value={value}>\n      {children}\n    </PlayerContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}