{"ast":null,"code":"import _objectSpread from\"/Users/walesolagbade/streaming_app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useEffect,useState,useCallback}from'react';import{io}from'socket.io-client';import{useAuth}from'./AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const SocketContext=/*#__PURE__*/createContext();export const useSocket=()=>{const context=useContext(SocketContext);if(!context){throw new Error('useSocket must be used within a SocketProvider');}return context;};export const SocketProvider=_ref=>{let{children}=_ref;console.log('🚀 SOCKET PROVIDER: Initializing...');const[socket,setSocket]=useState(null);const[isConnected,setIsConnected]=useState(false);const[currentRoom,setCurrentRoom]=useState(null);const[roomState,setRoomState]=useState(null);const[participants,setParticipants]=useState([]);const[messages,setMessages]=useState([]);const[playbackState,setPlaybackState]=useState({isPlaying:false,currentTrackId:null,currentTime:0,volume:0.7,isSynced:true});const{user,token,loading}=useAuth();// Emoji reaction function (now in correct scope)\nconst reactToMessage=useCallback(function(messageId,emoji){let add=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(socket&&currentRoom){socket.emit('room:react-message',{roomId:currentRoom,messageId,emoji,add});}},[socket,currentRoom]);console.log('🔐 SOCKET PROVIDER: Auth state',{hasUser:!!user,hasToken:!!token,loading});useEffect(()=>{console.log('🔌 SOCKET EFFECT: Checking connection requirements',{hasToken:!!token,hasUser:!!user,userId:user===null||user===void 0?void 0:user.id,currentSocket:!!socket,authLoading:loading});// Don't try to connect while auth is still loading\nif(loading){console.log('⏳ SOCKET: Waiting for auth to finish loading...');return;}if(!token||!user){console.log('❌ SOCKET: Missing token or user, setting disconnected state');if(socket){socket.disconnect();setSocket(null);}setIsConnected(false);return;}console.log('✅ SOCKET: Creating new connection...');// Create socket connection with API URL from environment or default\nconst apiUrl=process.env.REACT_APP_API_URL||'http://localhost:5002';console.log('🔌 SOCKET: Connecting to:',apiUrl);console.log('🔐 SOCKET: Using token:',token?\"\".concat(token.substring(0,20),\"...\"):'NO TOKEN');console.log('👤 SOCKET: User:',user?\"\".concat(user.username,\" (ID: \").concat(user.id,\")\"):'NO USER');// Test if token is valid by making a quick API call\nif(token){fetch(\"\".concat(apiUrl,\"/api/auth/me\"),{headers:{'Authorization':\"Bearer \".concat(token)}}).then(response=>{console.log('🔐 SOCKET: Token validation response:',response.status);return response.json();}).then(data=>{console.log('🔐 SOCKET: Token validation data:',data);}).catch(error=>{console.error('🔐 SOCKET: Token validation failed:',error);});}const newSocket=io(apiUrl,{auth:{token:token},transports:['websocket','polling'],timeout:5000,reconnection:true,reconnectionAttempts:3,reconnectionDelay:1000,forceNew:true});// Connection event handlers\nnewSocket.on('connect',()=>{console.log('✅ Connected to WebSocket server');setIsConnected(true);// If we were trying to join a room, rejoin after reconnection\nif(currentRoom){console.log('🔄 SOCKET: Rejoining room after connection:',currentRoom);newSocket.emit('room:join',currentRoom);}});newSocket.on('connect_error',error=>{console.error('❌ Socket connection error:',error.message);console.error('❌ Socket connection details:',{type:error.type,description:error.description,context:error.context,serverUrl:apiUrl,hasToken:!!token});setIsConnected(false);});newSocket.on('disconnect',reason=>{console.log('🔌 Socket disconnected:',reason);setIsConnected(false);});// Room event handlers\nnewSocket.on('room:participants-list',participantsList=>{console.log('📋 Received participants list:',participantsList);setParticipants(participantsList);});newSocket.on('room:user-joined',data=>{console.log('👤 User joined room:',data.user.username);setParticipants(prev=>{if(prev.find(p=>p.id===data.user.id)){return prev;// User already in list\n}return[...prev,_objectSpread(_objectSpread({},data.user),{},{isHost:data.isHost,joinedAt:data.timestamp})];});});newSocket.on('room:user-left',data=>{console.log('👤 User left room:',data.user.username);setParticipants(prev=>prev.filter(p=>p.id!==data.user.id));});// Synchronized playback event handlers\nnewSocket.on('playback-state-sync',state=>{console.log('🔄 Playback state sync received:',state);setPlaybackState({isPlaying:state.isPlaying,currentTrackId:state.currentTrackId,currentTime:state.currentTime,volume:state.volume,isSynced:true});});newSocket.on('sync-play',data=>{console.log('▶️ Sync play received:',data);setPlaybackState(prev=>_objectSpread(_objectSpread({},prev),{},{isPlaying:true,currentTrackId:data.trackId||prev.currentTrackId,currentTime:data.currentTime,isSynced:true}));});newSocket.on('sync-pause',data=>{console.log('⏸️ Sync pause received:',data);setPlaybackState(prev=>_objectSpread(_objectSpread({},prev),{},{isPlaying:false,currentTime:data.currentTime,isSynced:true}));});newSocket.on('sync-seek',data=>{console.log('⏭️ Sync seek received:',data);setPlaybackState(prev=>_objectSpread(_objectSpread({},prev),{},{currentTime:data.currentTime,isSynced:true}));});newSocket.on('sync-track-change',data=>{console.log('🎵 Sync track change received:',data);setPlaybackState(prev=>_objectSpread(_objectSpread({},prev),{},{currentTrackId:data.trackId,currentTime:0,isPlaying:data.autoPlay,isSynced:true}));});newSocket.on('sync-volume-change',data=>{console.log('🔊 Sync volume change received:',data);setPlaybackState(prev=>_objectSpread(_objectSpread({},prev),{},{volume:data.volume,isSynced:true}));});// Chat event handlers\nnewSocket.on('room:chat-message',message=>{console.log('💬 New message received:',message);setMessages(prev=>[...prev,{id:message.id||Date.now(),user:{id:message.userId,username:message.username},message:message.message,timestamp:message.timestamp,type:'text'}]);});newSocket.on('room:chat-history',history=>{console.log('📜 Chat history received:',history.length,'messages');setMessages(history.map(msg=>({id:msg.id,user:{id:msg.userId,username:msg.username},message:msg.message,timestamp:msg.timestamp,type:msg.type||'text'})));});newSocket.on('error',error=>{console.error('Socket error:',error);});setSocket(newSocket);// Cleanup function\nreturn()=>{console.log('🧹 SOCKET: Cleaning up connection');newSocket.disconnect();};},[token,user,loading]);// Room management functions\nconst joinRoom=useCallback(async(roomId,userData)=>{console.log('🚪 JOIN ROOM: Called with',{roomId,userData:userData===null||userData===void 0?void 0:userData.username,hasSocket:!!socket,userDataObj:userData});if(!socket){console.error('❌ JOIN ROOM: Cannot join - missing socket');alert('Socket connection not established. Please refresh and try again.');return;}if(!userData||!userData.id||!userData.username){console.error('❌ JOIN ROOM: Cannot join - missing or invalid user data',userData);alert('User data missing or invalid. Please re-login.');return;}try{setCurrentRoom(roomId);setParticipants([{id:userData.id,username:userData.username,email:userData.email,isHost:false,joinedAt:new Date().toISOString()}]);console.log('🚪 JOIN ROOM: Emitting room:join event for room',roomId);socket.emit('room:join',roomId,ack=>{if(ack&&ack.error){console.error('❌ JOIN ROOM: Server error:',ack.error);alert('Failed to join room: '+ack.error);}else{console.log('✅ JOIN ROOM: Successfully joined room',roomId);}});}catch(error){console.error('❌ JOIN ROOM: Exception',error);alert('Unexpected error joining room: '+error.message);}},[socket]);const leaveRoom=useCallback(()=>{if(socket&&currentRoom){console.log(\"\\uD83D\\uDEAA Leaving room: \".concat(currentRoom));socket.emit('room:leave',currentRoom);setCurrentRoom(null);setParticipants([]);setMessages([]);setPlaybackState({isPlaying:false,currentTrackId:null,currentTime:0,volume:0.7,isSynced:true});}},[socket,currentRoom]);// Host-only playback controls\nconst hostPlay=useCallback(function(trackId){let currentTime=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;console.log('▶️ HOST PLAY: Called with',{trackId,currentTime,hasSocket:!!socket,currentRoom,socketConnected:socket===null||socket===void 0?void 0:socket.connected});if(socket&&currentRoom){console.log('▶️ HOST PLAY: Emitting host-play event');socket.emit('host-play',{trackId,currentTime});}else{console.error('🚫 HOST PLAY: Cannot emit - missing socket or room',{hasSocket:!!socket,currentRoom,socketConnected:socket===null||socket===void 0?void 0:socket.connected});}},[socket,currentRoom]);const hostPause=useCallback(function(){let currentTime=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;console.log('⏸️ HOST PAUSE: Called with',{currentTime,hasSocket:!!socket,currentRoom,socketConnected:socket===null||socket===void 0?void 0:socket.connected});if(socket&&currentRoom){console.log('⏸️ HOST PAUSE: Emitting host-pause event');socket.emit('host-pause',{currentTime});}else{console.error('🚫 HOST PAUSE: Cannot emit - missing socket or room',{hasSocket:!!socket,currentRoom,socketConnected:socket===null||socket===void 0?void 0:socket.connected});}},[socket,currentRoom]);const hostSeek=useCallback(currentTime=>{if(socket&&currentRoom){console.log('⏭️ Host seek:',currentTime);socket.emit('host-seek',{currentTime});}},[socket,currentRoom]);const hostChangeTrack=useCallback(function(trackId){let autoPlay=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;console.log('🎵 HOST CHANGE TRACK: Called with',{trackId,autoPlay,hasSocket:!!socket,currentRoom,socketConnected:socket===null||socket===void 0?void 0:socket.connected,trackIdType:typeof trackId});if(socket&&currentRoom){console.log('🎵 HOST CHANGE TRACK: Emitting host-change-track event to room',currentRoom);socket.emit('host-change-track',{trackId,autoPlay});}else{console.error('🚫 HOST CHANGE TRACK: Cannot emit - missing socket or room',{hasSocket:!!socket,socketConnected:socket===null||socket===void 0?void 0:socket.connected,currentRoom,reason:!socket?'no socket':!currentRoom?'no currentRoom':'unknown'});}},[socket,currentRoom]);const hostVolumeChange=useCallback(volume=>{if(socket&&currentRoom){console.log('🔊 Host volume change:',volume);socket.emit('host-volume-change',{volume});}},[socket,currentRoom]);// Request playback sync (for recovering from desync)\nconst requestPlaybackSync=useCallback(()=>{if(socket&&currentRoom){console.log('🔄 Requesting playback sync');socket.emit('request-playback-sync');}},[socket,currentRoom]);// Chat functions\nconst sendMessage=useCallback(message=>{if(!socket){console.error('❌ SEND MESSAGE: No socket connection.');alert('Cannot send message: No socket connection.');return;}if(!currentRoom){console.error('❌ SEND MESSAGE: No current room set.');alert('Cannot send message: Not in a room.');return;}if(!message||typeof message!=='string'||!message.trim()){console.error('❌ SEND MESSAGE: Invalid message content.',message);alert('Cannot send empty message.');return;}const messageData={roomId:currentRoom,message:message.trim()};console.log('💬 SEND MESSAGE: Emitting room:chat-message',messageData);socket.emit('room:chat-message',messageData,ack=>{if(ack&&ack.error){console.error('❌ SEND MESSAGE: Server error:',ack.error);alert('Failed to send message: '+ack.error);}else{console.log('✅ SEND MESSAGE: Message sent successfully.');}});},[socket,currentRoom]);// Participants functions\nconst getParticipants=useCallback(()=>{if(socket&&currentRoom){console.log('📋 Requesting participants list for room:',currentRoom);socket.emit('room:get-participants',currentRoom);}},[socket,currentRoom]);// Status update functions\nconst updateStatus=useCallback(status=>{if(socket&&currentRoom){socket.emit('update-status',_objectSpread({roomId:currentRoom},status));}},[socket,currentRoom]);const notifyTrackAdded=useCallback(trackData=>{if(socket&&currentRoom){socket.emit('track-added',{roomId:currentRoom,track:trackData});}},[socket,currentRoom]);const value={socket,isConnected,currentRoom,roomState,participants,messages,playbackState,// Room management\njoinRoom,leaveRoom,// Host playback controls\nhostPlay,hostPause,hostSeek,hostChangeTrack,hostVolumeChange,requestPlaybackSync,// Chat\nsendMessage,reactToMessage,// Participants\ngetParticipants,// Other functions\nupdateStatus,notifyTrackAdded};return/*#__PURE__*/_jsx(SocketContext.Provider,{value:value,children:children});};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}