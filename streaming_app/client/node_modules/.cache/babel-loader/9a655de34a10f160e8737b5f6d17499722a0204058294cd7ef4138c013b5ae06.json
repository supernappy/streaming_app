{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{authAPI}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[token,setToken]=useState(localStorage.getItem('token'));const[rememberedCredentials,setRememberedCredentials]=useState(()=>{const saved=localStorage.getItem('rememberedCredentials');return saved?JSON.parse(saved):null;});// Check authentication status on app load\nuseEffect(()=>{const checkAuth=async()=>{const storedToken=localStorage.getItem('token');const storedUser=localStorage.getItem('user');if(storedToken&&storedUser){try{setToken(storedToken);setUser(JSON.parse(storedUser));}catch(error){console.error('Failed to parse stored user data:',error);logout();}}setLoading(false);};checkAuth();},[]);const saveCredentials=(email,password,remember)=>{if(remember){const credentials={email,password};localStorage.setItem('rememberedCredentials',JSON.stringify(credentials));localStorage.setItem('rememberMe','true');setRememberedCredentials(credentials);}else{localStorage.removeItem('rememberedCredentials');localStorage.removeItem('rememberMe');setRememberedCredentials(null);}};const getRememberedCredentials=()=>{const isRememberEnabled=localStorage.getItem('rememberMe')==='true';if(isRememberEnabled&&rememberedCredentials){return rememberedCredentials;}return null;};const login=async function(email,password){let rememberMe=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;try{console.log('🔐 LOGIN DEBUG: Attempting login with:',{email,password:'***'});console.log('🔐 LOGIN DEBUG: API URL:',process.env.REACT_APP_API_URL);const response=await authAPI.login(email,password);console.log('🔐 LOGIN DEBUG: Login response:',response);const{user,token}=response.data;setUser(user);setToken(token);localStorage.setItem('token',token);localStorage.setItem('user',JSON.stringify(user));// Save credentials if remember me is checked\nsaveCredentials(email,password,rememberMe);console.log('🔐 LOGIN DEBUG: Login successful, user set:',user);return{success:true};}catch(error){var _error$response,_error$response$data;console.error('🔐 LOGIN DEBUG: Login error:',error);console.error('🔐 LOGIN DEBUG: Error response:',error.response);return{success:false,error:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'Login failed'};}};const register=async(email,username,password)=>{try{const response=await authAPI.register({email,username,password});const{user,token}=response.data;setUser(user);setToken(token);localStorage.setItem('token',token);localStorage.setItem('user',JSON.stringify(user));return{success:true};}catch(error){var _error$response2,_error$response2$data;return{success:false,error:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'Registration failed'};}};const logout=()=>{setUser(null);setToken(null);localStorage.removeItem('token');localStorage.removeItem('user');// Note: We keep remembered credentials for next login unless user explicitly unchecks remember me\n};const clearRememberedCredentials=()=>{localStorage.removeItem('rememberedCredentials');localStorage.removeItem('rememberMe');setRememberedCredentials(null);};const updateUser=updatedUser=>{setUser(updatedUser);localStorage.setItem('user',JSON.stringify(updatedUser));console.log('🔄 User updated in context:',updatedUser);};const value={user,token,login,register,logout,updateUser,loading,isAuthenticated:!!user,rememberedCredentials,getRememberedCredentials,clearRememberedCredentials,saveCredentials};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}