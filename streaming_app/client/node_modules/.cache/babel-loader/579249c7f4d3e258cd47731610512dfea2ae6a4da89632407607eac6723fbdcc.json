{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{Box,Paper,Typography,IconButton,Slider,List,ListItem,ListItemText,ListItemAvatar,Avatar,Chip,Dialog,DialogTitle,DialogContent,Button,TextField,Tooltip}from'@mui/material';import{PlayArrow,Pause,SkipNext,SkipPrevious,VolumeUp,QueueMusic,Add,MusicNote}from'@mui/icons-material';import{tracksAPI}from'../services/api';import socketService from'../services/socketService';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const RoomAudioPlayer=_ref=>{let{room,isHost,onAddTrack,tracks=[]}=_ref;const[isPlaying,setIsPlaying]=useState(false);const[currentTrack,setCurrentTrack]=useState(null);const[currentTime,setCurrentTime]=useState(0);const[duration,setDuration]=useState(0);const[volume,setVolume]=useState(70);const[showAddTrack,setShowAddTrack]=useState(false);const[searchQuery,setSearchQuery]=useState('');const[availableTracks,setAvailableTracks]=useState([]);const[isLoadingTracks,setIsLoadingTracks]=useState(false);const[isSyncing,setIsSyncing]=useState(false);const[connectedUsers,setConnectedUsers]=useState([]);const audioRef=useRef(null);const videoRef=useRef(null);const syncTimeoutRef=useRef(null);useEffect(()=>{if(tracks.length>0&&!currentTrack){console.log('=== ROOM AUDIO DEBUG ===');console.log('Setting first track as current:',tracks[0]);console.log('Track file_url:',tracks[0].file_url);console.log('Track url:',tracks[0].url);setCurrentTrack(tracks[0]);}},[tracks,currentTrack]);// Utility: is current track an MP4?\nconst isCurrentTrackMp4=currentTrack&&(currentTrack.file_url||currentTrack.url||'').toLowerCase().endsWith('.mp4');useEffect(()=>{const media=isCurrentTrackMp4?videoRef.current:audioRef.current;if(!media)return;const updateTime=()=>setCurrentTime(media.currentTime);const updateDuration=()=>setDuration(media.duration);const handleLoadStart=()=>{console.log('🔄 Room media: Load started for:',currentTrack===null||currentTrack===void 0?void 0:currentTrack.title);};const handleCanPlay=()=>{console.log('✅ Room media: Can play:',currentTrack===null||currentTrack===void 0?void 0:currentTrack.title);};const handleError=e=>{console.error('❌ Room media error:',e);console.error('❌ Media error for track:',currentTrack===null||currentTrack===void 0?void 0:currentTrack.title);console.error('❌ Media src:',media.src);};media.addEventListener('timeupdate',updateTime);media.addEventListener('loadedmetadata',updateDuration);media.addEventListener('loadstart',handleLoadStart);media.addEventListener('canplay',handleCanPlay);media.addEventListener('error',handleError);return()=>{media.removeEventListener('timeupdate',updateTime);media.removeEventListener('loadedmetadata',updateDuration);media.removeEventListener('loadstart',handleLoadStart);media.removeEventListener('canplay',handleCanPlay);media.removeEventListener('error',handleError);};},[currentTrack,isCurrentTrackMp4]);// Socket connection and synchronization\nuseEffect(()=>{const initializeSocket=async()=>{try{const token=localStorage.getItem('token');if(!token){console.warn('No auth token found for socket connection');return;}// Connect to socket service\nawait socketService.connect(token);// Join room\nsocketService.joinRoom(room.id,isHost);// Set up event listeners\nsocketService.on('playback-state-sync',handlePlaybackStateSync);socketService.on('sync-play',handleSyncPlay);socketService.on('sync-pause',handleSyncPause);socketService.on('sync-seek',handleSyncSeek);socketService.on('sync-track-change',handleSyncTrackChange);socketService.on('sync-volume-change',handleSyncVolumeChange);socketService.on('user-joined',handleUserJoined);socketService.on('user-left',handleUserLeft);console.log('🔗 Socket service initialized for room',room.id);}catch(error){console.error('Failed to initialize socket service:',error);}};if(room!==null&&room!==void 0&&room.id){initializeSocket();}return()=>{// Clean up socket listeners\nsocketService.off('playback-state-sync',handlePlaybackStateSync);socketService.off('sync-play',handleSyncPlay);socketService.off('sync-pause',handleSyncPause);socketService.off('sync-seek',handleSyncSeek);socketService.off('sync-track-change',handleSyncTrackChange);socketService.off('sync-volume-change',handleSyncVolumeChange);socketService.off('user-joined',handleUserJoined);socketService.off('user-left',handleUserLeft);socketService.leaveRoom();};},[room===null||room===void 0?void 0:room.id,isHost]);// Socket event handlers\nconst getMediaRef=()=>isCurrentTrackMp4?videoRef:audioRef;const handlePlaybackStateSync=data=>{console.log('🔄 Syncing playback state:',data);setIsSyncing(true);if(data.currentTrackId&&tracks.length>0){const track=tracks.find(t=>t.id===data.currentTrackId);if(track&&track!==currentTrack){setCurrentTrack(track);}}const media=getMediaRef().current;if(media){media.currentTime=data.currentTime||0;media.volume=(data.volume||0.7)/100;if(data.isPlaying&&!isPlaying){media.play().catch(console.error);setIsPlaying(true);}else if(!data.isPlaying&&isPlaying){media.pause();setIsPlaying(false);}}setTimeout(()=>setIsSyncing(false),500);};const handleSyncPlay=data=>{console.log('▶️ Received sync play command:',data);if(!isHost){const media=getMediaRef().current;if(media){setIsSyncing(true);media.currentTime=data.currentTime||0;media.play().then(()=>{setIsPlaying(true);setTimeout(()=>setIsSyncing(false),500);}).catch(console.error);}}};const handleSyncPause=data=>{console.log('⏸️ Received sync pause command:',data);if(!isHost){const media=getMediaRef().current;if(media){setIsSyncing(true);media.currentTime=data.currentTime||0;media.pause();setIsPlaying(false);setTimeout(()=>setIsSyncing(false),500);}}};const handleSyncSeek=data=>{console.log('⏩ Received sync seek command:',data);if(!isHost){const media=getMediaRef().current;if(media){setIsSyncing(true);media.currentTime=data.currentTime;setTimeout(()=>setIsSyncing(false),500);}}};const handleSyncTrackChange=data=>{console.log('🎵 Received sync track change:',data);if(!isHost&&tracks.length>0){const track=tracks.find(t=>t.id===data.trackId);if(track){setIsSyncing(true);setCurrentTrack(track);setCurrentTime(0);if(data.autoPlay){setTimeout(()=>{const media=getMediaRef().current;if(media){media.play().then(()=>{setIsPlaying(true);}).catch(console.error);}},100);}setTimeout(()=>setIsSyncing(false),500);}}};const handleSyncVolumeChange=data=>{console.log('🔊 Received sync volume change:',data);if(!isHost){const media=getMediaRef().current;if(media){setVolume(data.volume);media.volume=data.volume/100;}}};const handleUserJoined=data=>{console.log('👋 User joined:',data);setConnectedUsers(prev=>[...prev.filter(u=>u.id!==data.user.id),data.user]);};const handleUserLeft=data=>{console.log('👋 User left:',data);setConnectedUsers(prev=>prev.filter(u=>u.id!==data.user.id));};const handlePlayPause=async()=>{const media=getMediaRef().current;if(!media||isSyncing)return;try{if(isPlaying){// Pause\nmedia.pause();setIsPlaying(false);// If host, sync pause with all participants\nif(isHost){socketService.hostPause(media.currentTime);}}else{// Play\nawait media.play();setIsPlaying(true);// If host, sync play with all participants\nif(isHost&&currentTrack){socketService.hostPlay(currentTrack.id,media.currentTime);}}}catch(error){console.error('Error in handlePlayPause:',error);}};const handleTrackClick=(track,index)=>{console.log('Track clicked:',track.title,'Index:',index);if(isSyncing){console.log('Ignoring track click during sync');return;}setCurrentTrack(track);setCurrentTime(0);// If host, sync track change with all participants\nif(isHost){socketService.hostChangeTrack(track.id,true);// autoPlay = true\n}else{const media=(track.file_url||track.url||'').toLowerCase().endsWith('.mp4')?videoRef.current:audioRef.current;if(media){media.load();media.play().then(()=>{setIsPlaying(true);}).catch(console.error);}}};const handlePrevious=()=>{if(!tracks.length||isSyncing)return;const currentIndex=tracks.findIndex(track=>track.id===(currentTrack===null||currentTrack===void 0?void 0:currentTrack.id));const prevIndex=currentIndex>0?currentIndex-1:tracks.length-1;const prevTrack=tracks[prevIndex];if(prevTrack){handleTrackClick(prevTrack,prevIndex);}};const handleNext=()=>{if(!tracks.length||isSyncing)return;const currentIndex=tracks.findIndex(track=>track.id===(currentTrack===null||currentTrack===void 0?void 0:currentTrack.id));const nextIndex=currentIndex<tracks.length-1?currentIndex+1:0;const nextTrack=tracks[nextIndex];if(nextTrack){handleTrackClick(nextTrack,nextIndex);}};const handleVolumeChange=(event,newValue)=>{setVolume(newValue);if(audioRef.current){audioRef.current.volume=newValue/100;// If host, sync volume with all participants\nif(isHost){socketService.hostVolumeChange(newValue);}}};const handleSeek=(event,newValue)=>{if(!isSyncing&&audioRef.current){if(audioRef.current){audioRef.current.currentTime=newValue;}setCurrentTime(newValue);// If host, sync seek with all participants\nif(isHost){socketService.hostSeek(newValue);}}};// Original functions continue below...\nconst originalHandlePlayPause=async()=>{const audio=audioRef.current;if(!audio)return;try{if(isPlaying){audio.pause();setIsPlaying(false);}else{console.log('🎵 Room audio: Attempting to play:',currentTrack===null||currentTrack===void 0?void 0:currentTrack.title);console.log('🎵 Audio src:',audio.src);await audio.play();setIsPlaying(true);console.log('✅ Room audio: Playing successfully');}}catch(error){console.error('❌ Room audio play error:',error);setIsPlaying(false);}};// Original handleNext and handlePrevious removed - using synchronized versions above\nconst handleSeekLocal=(event,newValue)=>{const audio=audioRef.current;audio.currentTime=newValue;setCurrentTime(newValue);};const handleVolumeChangeLocal=(event,newValue)=>{const audio=audioRef.current;audio.volume=newValue/100;setVolume(newValue);};const handleAddTrack=async()=>{try{console.log('=== DEBUG: Starting handleAddTrack ===');console.log('Is host:',isHost);console.log('Room:',room);console.log('Current tracks:',tracks);setIsLoadingTracks(true);console.log('Token exists:',!!localStorage.getItem('token'));// Get available tracks from user's library\nconst token=localStorage.getItem('token');if(!token){throw new Error('No authentication token found. Please log in again.');}console.log('Fetching user tracks...');const response=await tracksAPI.getUserTracks();console.log('Tracks API response:',response);console.log('Response status:',response.status);console.log('Response data:',response.data);if(response.data&&response.data.tracks){const extractedTracks=response.data.tracks;console.log('Extracted tracks:',extractedTracks);console.log('Number of tracks found:',extractedTracks.length);setAvailableTracks(extractedTracks);// Add explicit debugging for dialog display\nconsole.log('🎯 TRACKS AVAILABLE FOR SELECTION:');extractedTracks.forEach((track,index)=>{console.log(\"\".concat(index+1,\". \\\"\").concat(track.title,\"\\\" by \").concat(track.artist,\" (ID: \").concat(track.id,\")\"));});console.log('🎯 Dialog will now show these tracks. Click on any track to add it to the room.');// 🚨 BYPASS DIALOG - Auto-add the first track for testing\nif(extractedTracks.length>0){const firstTrack=extractedTracks[0];console.log('🚨 BYPASS: Auto-adding first track for testing:',firstTrack.title);// Call handleSelectTrack directly\nif(onAddTrack){try{console.log('🎯 CALLING onAddTrack directly with first track...');await onAddTrack(firstTrack);alert(\"\\u2705 SUCCESS! Auto-added \\\"\".concat(firstTrack.title,\"\\\" to the room!\"));setShowAddTrack(false);}catch(error){console.error('❌ Error calling onAddTrack:',error);alert(\"\\u274C Error adding track: \".concat(error.message));}}else{console.error('❌ onAddTrack function not available');alert('❌ onAddTrack function not available');}}}else{console.warn('No tracks found in response');setAvailableTracks([]);alert('No tracks found in your library');}// Still open dialog for manual testing if needed\nsetShowAddTrack(true);console.log('=== DEBUG: handleAddTrack completed successfully ===');console.log('🚨 NEXT STEP: Track should now be auto-added! Check for success message.');}catch(error){var _error$response,_error$response2,_error$response3,_error$response4,_error$response5,_error$response6;console.error('=== DEBUG: Error in handleAddTrack ===');console.error('Error object:',error);console.error('Error message:',error.message);console.error('Error details:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data);console.error('Error status:',(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status);console.error('Error headers:',(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.headers);// More specific error messages\nif(((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status)===401){alert('Authentication failed. Please log in again and try.');}else if(((_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.status)===403){alert('You do not have permission to access your tracks.');}else if(((_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status)===500){alert('Server error. Please try again later.');}else{alert(\"Failed to load your tracks: \".concat(error.message,\". Please check the console for details.\"));}}finally{setIsLoadingTracks(false);}};const handleSelectTrack=async track=>{try{console.log('🎵 === DEBUG: Starting handleSelectTrack ===');console.log('Selected track:',track);console.log('Track title:',track.title);console.log('Track ID:',track.id);console.log('Room ID:',room===null||room===void 0?void 0:room.id);console.log('onAddTrack function:',typeof onAddTrack);// Show immediate feedback to user\nconst originalButton=document.activeElement;if(originalButton&&originalButton.textContent.includes('Add')){originalButton.innerHTML='⏳ Adding...';originalButton.disabled=true;}if(!onAddTrack){console.error('❌ onAddTrack function is not provided');alert('Cannot add track: missing callback function');return;}if(!track||!track.id){console.error('❌ Invalid track selected:',track);alert('Invalid track selected');return;}console.log('📤 Calling onAddTrack with track:',track.title);await onAddTrack(track);setShowAddTrack(false);setSearchQuery('');console.log('✅ === DEBUG: Track added successfully! ===');console.log('Track title added:',track.title);// Show success feedback\nalert(\"\\u2705 Successfully added \\\"\".concat(track.title,\"\\\" to the room!\"));}catch(error){var _error$response7,_error$response8,_error$response9,_error$response0,_error$response1,_error$response10;console.error('❌ === DEBUG: Error in handleSelectTrack ===');console.error('Error object:',error);console.error('Error message:',error.message);console.error('Error details:',(_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.data);console.error('Error status:',(_error$response8=error.response)===null||_error$response8===void 0?void 0:_error$response8.status);// More specific error messages\nif(((_error$response9=error.response)===null||_error$response9===void 0?void 0:_error$response9.status)===403){alert('❌ You do not have permission to add tracks to this room.');}else if(((_error$response0=error.response)===null||_error$response0===void 0?void 0:_error$response0.status)===404){alert('❌ Track or room not found.');}else if(((_error$response1=error.response)===null||_error$response1===void 0?void 0:_error$response1.status)===409){alert('⚠️ This track is already in the room.');}else if(((_error$response10=error.response)===null||_error$response10===void 0?void 0:_error$response10.status)===500){alert('❌ Server error. Please try again later.');}else{alert(\"\\u274C Failed to add track: \".concat(error.message));}}};const handleSearchChange=event=>{setSearchQuery(event.target.value);};const formatTime=time=>{const minutes=Math.floor(time/60);const seconds=Math.floor(time%60);return\"\".concat(minutes,\":\").concat(seconds.toString().padStart(2,'0'));};const filteredTracks=availableTracks.filter(track=>track.title.toLowerCase().includes(searchQuery.toLowerCase())||track.artist.toLowerCase().includes(searchQuery.toLowerCase()));if(!currentTrack&&tracks.length===0){return/*#__PURE__*/_jsxs(Paper,{elevation:3,sx:{p:3,textAlign:'center'},children:[/*#__PURE__*/_jsx(QueueMusic,{sx:{fontSize:48,color:'text.secondary',mb:2}}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",color:\"text.secondary\",gutterBottom:true,children:\"No tracks in this room yet\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",startIcon:/*#__PURE__*/_jsx(Add,{}),onClick:handleAddTrack,disabled:isLoadingTracks,sx:{mt:2},children:isLoadingTracks?'Loading...':'Add First Track'})]});}return/*#__PURE__*/_jsxs(Paper,{elevation:3,sx:{p:3},children:[isCurrentTrackMp4?/*#__PURE__*/_jsx(\"video\",{ref:videoRef,src:(currentTrack===null||currentTrack===void 0?void 0:currentTrack.file_url)||(currentTrack===null||currentTrack===void 0?void 0:currentTrack.url),onEnded:handleNext,crossOrigin:\"anonymous\",style:{width:'100%',maxHeight:320,marginBottom:16,background:'#000'},controls:true,poster:currentTrack===null||currentTrack===void 0?void 0:currentTrack.cover_url}):/*#__PURE__*/_jsx(\"audio\",{ref:audioRef,src:(currentTrack===null||currentTrack===void 0?void 0:currentTrack.file_url)||(currentTrack===null||currentTrack===void 0?void 0:currentTrack.url),onEnded:handleNext,crossOrigin:\"anonymous\"}),currentTrack&&/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',mb:3},children:[/*#__PURE__*/_jsx(Avatar,{sx:{width:56,height:56,mr:2},children:/*#__PURE__*/_jsx(MusicNote,{})}),/*#__PURE__*/_jsxs(Box,{sx:{flexGrow:1},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",noWrap:true,children:[currentTrack.title,isSyncing&&/*#__PURE__*/_jsx(Chip,{label:\"Syncing...\",size:\"small\",color:\"primary\",sx:{ml:1}})]}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"text.secondary\",noWrap:true,children:[currentTrack.artist,isHost&&/*#__PURE__*/_jsx(Chip,{label:\"HOST\",size:\"small\",color:\"success\",sx:{ml:1}}),connectedUsers.length>0&&/*#__PURE__*/_jsx(Chip,{label:\"\".concat(connectedUsers.length+1,\" users\"),size:\"small\",color:\"info\",sx:{ml:1}})]})]}),/*#__PURE__*/_jsx(Chip,{label:\"\".concat(tracks.findIndex(t=>t.id===currentTrack.id)+1,\" of \").concat(tracks.length),size:\"small\",variant:\"outlined\"})]}),/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',justifyContent:'center',mb:2},children:[/*#__PURE__*/_jsx(Tooltip,{title:\"Previous\",children:/*#__PURE__*/_jsx(IconButton,{onClick:handlePrevious,disabled:!currentTrack||tracks.findIndex(t=>t.id===currentTrack.id)===0,children:/*#__PURE__*/_jsx(SkipPrevious,{})})}),/*#__PURE__*/_jsx(Tooltip,{title:isPlaying?\"Pause\":\"Play\",children:/*#__PURE__*/_jsx(IconButton,{onClick:handlePlayPause,disabled:!currentTrack,sx:{mx:1},children:isPlaying?/*#__PURE__*/_jsx(Pause,{}):/*#__PURE__*/_jsx(PlayArrow,{})})}),/*#__PURE__*/_jsx(Tooltip,{title:\"Next\",children:/*#__PURE__*/_jsx(IconButton,{onClick:handleNext,disabled:!currentTrack||tracks.findIndex(t=>t.id===currentTrack.id)===tracks.length-1,children:/*#__PURE__*/_jsx(SkipNext,{})})})]}),currentTrack&&/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',mb:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"caption\",sx:{mr:1,minWidth:'40px'},children:formatTime(currentTime)}),/*#__PURE__*/_jsx(Slider,{value:currentTime,max:duration||0,onChange:isHost?handleSeek:handleSeekLocal,sx:{flexGrow:1,mx:1}}),/*#__PURE__*/_jsx(Typography,{variant:\"caption\",sx:{ml:1,minWidth:'40px'},children:formatTime(duration)})]}),/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',mb:3},children:[/*#__PURE__*/_jsx(VolumeUp,{sx:{mr:1}}),/*#__PURE__*/_jsx(Slider,{value:volume,onChange:handleVolumeChange,sx:{width:100}})]}),tracks.length>0&&/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',justifyContent:'space-between',alignItems:'center',mb:2},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",children:[\"Queue (\",tracks.length,\" tracks)\"]}),/*#__PURE__*/_jsx(Button,{variant:\"outlined\",size:\"small\",startIcon:/*#__PURE__*/_jsx(Add,{}),onClick:handleAddTrack,disabled:isLoadingTracks,children:isLoadingTracks?'Loading...':'Add Track'})]}),/*#__PURE__*/_jsx(List,{sx:{maxHeight:200,overflow:'auto'},children:tracks.map((track,index)=>/*#__PURE__*/_jsxs(ListItem,{button:true,selected:(currentTrack===null||currentTrack===void 0?void 0:currentTrack.id)===track.id,onClick:()=>handleTrackClick(track,index),children:[/*#__PURE__*/_jsx(ListItemAvatar,{children:/*#__PURE__*/_jsx(Avatar,{sx:{width:32,height:32},children:/*#__PURE__*/_jsx(MusicNote,{fontSize:\"small\"})})}),/*#__PURE__*/_jsx(ListItemText,{primary:track.title,secondary:track.artist,primaryTypographyProps:{noWrap:true},secondaryTypographyProps:{noWrap:true}}),/*#__PURE__*/_jsx(Typography,{variant:\"caption\",color:\"text.secondary\",children:index+1})]},track.id))})]}),/*#__PURE__*/_jsxs(Dialog,{open:showAddTrack,onClose:()=>setShowAddTrack(false),maxWidth:\"md\",fullWidth:true,sx:{'& .MuiDialog-paper':{zIndex:9999}},children:[/*#__PURE__*/_jsxs(DialogTitle,{children:[\"Add Track to Room\",/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",sx:{mt:1},children:\"\\uD83C\\uDFB5 Click on any track below or click the \\\"Add\\\" button to add it to the room\"})]}),/*#__PURE__*/_jsxs(DialogContent,{children:[/*#__PURE__*/_jsx(TextField,{fullWidth:true,placeholder:\"Search your tracks...\",value:searchQuery,onChange:handleSearchChange,sx:{mb:2}}),/*#__PURE__*/_jsxs(Typography,{variant:\"subtitle2\",gutterBottom:true,children:[\"Your Tracks (\",availableTracks.length,\" available)\"]}),isLoadingTracks?/*#__PURE__*/_jsx(Box,{sx:{textAlign:'center',py:3},children:/*#__PURE__*/_jsx(Typography,{children:\"Loading your tracks...\"})}):availableTracks.length===0?/*#__PURE__*/_jsxs(Box,{sx:{textAlign:'center',py:3},children:[/*#__PURE__*/_jsx(Typography,{color:\"text.secondary\",children:\"No tracks found. Upload some tracks first to add them to the room.\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",sx:{mt:2},onClick:()=>window.location.href='/upload',children:\"Upload Tracks\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"primary\",sx:{mb:2,fontWeight:'bold'},children:[\"\\u26A0\\uFE0F DEBUG: \",filteredTracks.length,\" tracks rendered. Click DIRECTLY on the track items below.\"]}),/*#__PURE__*/_jsx(List,{sx:{maxHeight:300,overflow:'auto',border:'2px solid red',borderRadius:1},children:filteredTracks.map((track,index)=>{console.log(\"\\uD83C\\uDFB5 Rendering track \".concat(index+1,\": \").concat(track.title,\" (ID: \").concat(track.id,\")\"));return/*#__PURE__*/_jsxs(ListItem,{button:true,onClick:e=>{console.log('🎯 LIST ITEM CLICKED:',track.title);console.log('Event:',e);console.log('Event target:',e.target);console.log('Event currentTarget:',e.currentTarget);handleSelectTrack(track);},sx:{'&:hover':{backgroundColor:'action.hover',transform:'scale(1.02)',transition:'all 0.2s ease'},border:'1px solid blue',borderRadius:1,mb:1,cursor:'pointer',backgroundColor:'rgba(0, 255, 0, 0.1)'// Green background for visibility\n},children:[/*#__PURE__*/_jsx(ListItemAvatar,{children:/*#__PURE__*/_jsx(Avatar,{sx:{bgcolor:'primary.main'},children:/*#__PURE__*/_jsx(MusicNote,{})})}),/*#__PURE__*/_jsx(ListItemText,{primary:/*#__PURE__*/_jsx(Typography,{variant:\"subtitle1\",sx:{fontWeight:500},children:track.title}),secondary:/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"text.secondary\",children:[track.artist,\" \\u2022 \",track.genre||'Unknown Genre']})}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",size:\"small\",color:\"secondary\",sx:{ml:2,minWidth:80,backgroundColor:'red','&:hover':{backgroundColor:'darkred'}},onClick:e=>{e.stopPropagation();console.log('🎯 ADD BUTTON CLICKED for track:',track.title);console.log('Button event:',e);console.log('Track details:',track);handleSelectTrack(track);},children:\"\\u2795 Add\"})]},track.id);})}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"error\",sx:{mt:2,fontWeight:'bold'},children:\"\\uD83D\\uDEA8 If you can see tracks above but clicking doesn't work, there's a UI blocking issue!\"})]})]})]})]});};export default RoomAudioPlayer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}