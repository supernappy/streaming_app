// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  CREATOR
  MODERATOR
  ADMIN
}

enum TrackStatus {
  PROCESSING
  PUBLISHED
  DRAFT
  DELETED
}

enum RoomStatus {
  ACTIVE
  ENDED
  PAUSED
}

enum ParticipantRole {
  HOST
  MODERATOR
  SPEAKER
  LISTENER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  fullName  String
  avatar    String?
  bio       String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tracks             Track[]
  playlists          Playlist[]
  hostedRooms        Room[]            @relation("RoomHost")
  roomParticipations RoomParticipant[]

  @@map("users")
}

model Track {
  id           String      @id @default(cuid())
  title        String
  artist       String
  album        String?
  genre        String?
  description  String?
  duration     Int // in seconds
  bitrate      Int?
  audioUrl     String
  hlsPath      String
  coverUrl     String?
  playCount    Int         @default(0)
  fileSize     BigInt
  originalName String
  status       TrackStatus @default(PROCESSING)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlistTracks PlaylistTrack[]

  @@map("tracks")
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  coverUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tracks PlaylistTrack[]

  @@map("playlists")
}

model PlaylistTrack {
  id      String   @id @default(cuid())
  addedAt DateTime @default(now())

  // Relations
  playlistId String
  trackId    String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([playlistId, trackId])
  @@map("playlist_tracks")
}

model Room {
  id              String     @id @default(uuid())
  title           String
  description     String?
  maxParticipants Int        @default(50)
  isPublic        Boolean    @default(true)
  status          RoomStatus @default(ACTIVE)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  hostId       String
  host         User              @relation("RoomHost", fields: [hostId], references: [id], onDelete: Cascade)
  participants RoomParticipant[]

  @@map("rooms")
}

model RoomParticipant {
  id       String          @id @default(cuid())
  role     ParticipantRole @default(LISTENER)
  joinedAt DateTime        @default(now())
  isMuted  Boolean         @default(false)

  // Relations
  roomId String
  userId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_participants")
}
